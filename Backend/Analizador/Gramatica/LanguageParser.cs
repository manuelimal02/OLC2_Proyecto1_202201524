//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Gramatica/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Analizador {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, TIPO=47, ENTERO=48, DECIMAL=49, CADENA=50, BOOLEANO=51, CARACTER=52, 
		IDENTIFICADOR=53, WS=54, COMENTARIOL=55, COMENTARIOLN=56;
	public const int
		RULE_program = 0, RULE_declaraciones = 1, RULE_declaracion_variable = 2, 
		RULE_declaracion_arreglo = 3, RULE_declaracion_matriz = 4, RULE_dimensiones = 5, 
		RULE_contenido_matriz = 6, RULE_elementos_matriz = 7, RULE_elemento_matriz = 8, 
		RULE_lista_valores = 9, RULE_sentencia = 10, RULE_casos_switch = 11, RULE_default_switch = 12, 
		RULE_for_init = 13, RULE_expresion = 14;
	public static readonly string[] ruleNames = {
		"program", "declaraciones", "declaracion_variable", "declaracion_arreglo", 
		"declaracion_matriz", "dimensiones", "contenido_matriz", "elementos_matriz", 
		"elemento_matriz", "lista_valores", "sentencia", "casos_switch", "default_switch", 
		"for_init", "expresion"
	};

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'='", "';'", "':='", "'['", "']'", "'{'", "','", "'}'", 
		"'fmt.Println('", "')'", "'if'", "'('", "'else'", "'switch'", "'for'", 
		"'range'", "'break'", "'continue'", "'return'", "'case'", "':'", "'default'", 
		"'append('", "'strconv.Atoi('", "'strconv.ParseFloat('", "'reflect.TypeOf('", 
		"'slices.Index('", "'strings.Join('", "'len('", "'-'", "'!'", "'*'", "'/'", 
		"'%'", "'+'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'&&'", "'||'", 
		"'+='", "'-='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "TIPO", 
		"ENTERO", "DECIMAL", "CADENA", "BOOLEANO", "CARACTER", "IDENTIFICADOR", 
		"WS", "COMENTARIOL", "COMENTARIOLN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732932107875458L) != 0)) {
				{
				{
				State = 30;
				declaraciones();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaracion_matrizContext declaracion_matriz() {
			return GetRuleContext<Declaracion_matrizContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaracion_arregloContext declaracion_arreglo() {
			return GetRuleContext<Declaracion_arregloContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaracion_variableContext declaracion_variable() {
			return GetRuleContext<Declaracion_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		public DeclaracionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaraciones; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaraciones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionesContext declaraciones() {
		DeclaracionesContext _localctx = new DeclaracionesContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaraciones);
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36;
				declaracion_matriz();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37;
				declaracion_arreglo();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38;
				declaracion_variable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 39;
				sentencia();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaracion_variableContext : ParserRuleContext {
		public Declaracion_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracion_variable; } }
	 
		public Declaracion_variableContext() { }
		public virtual void CopyFrom(Declaracion_variableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracionPorDefectoContext : Declaracion_variableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(LanguageParser.TIPO, 0); }
		public DeclaracionPorDefectoContext(Declaracion_variableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionPorDefecto(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionExplicitaContext : Declaracion_variableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(LanguageParser.TIPO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public DeclaracionExplicitaContext(Declaracion_variableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionExplicita(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionImplicitaContext : Declaracion_variableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public DeclaracionImplicitaContext(Declaracion_variableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionImplicita(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaracion_variableContext declaracion_variable() {
		Declaracion_variableContext _localctx = new Declaracion_variableContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaracion_variable);
		int _la;
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new DeclaracionExplicitaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				Match(T__0);
				State = 43;
				Match(IDENTIFICADOR);
				State = 44;
				Match(TIPO);
				State = 45;
				Match(T__1);
				State = 46;
				expresion(0);
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 47;
					Match(T__2);
					}
				}

				}
				break;
			case 2:
				_localctx = new DeclaracionPorDefectoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 50;
				Match(T__0);
				State = 51;
				Match(IDENTIFICADOR);
				State = 52;
				Match(TIPO);
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 53;
					Match(T__2);
					}
				}

				}
				break;
			case 3:
				_localctx = new DeclaracionImplicitaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 56;
				Match(IDENTIFICADOR);
				State = 57;
				Match(T__3);
				State = 58;
				expresion(0);
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 59;
					Match(T__2);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaracion_arregloContext : ParserRuleContext {
		public Declaracion_arregloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracion_arreglo; } }
	 
		public Declaracion_arregloContext() { }
		public virtual void CopyFrom(Declaracion_arregloContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracionArregloPorDefectoContext : Declaracion_arregloContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(LanguageParser.TIPO, 0); }
		public DeclaracionArregloPorDefectoContext(Declaracion_arregloContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionArregloPorDefecto(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionArregloExplicitaContext : Declaracion_arregloContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(LanguageParser.TIPO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public DeclaracionArregloExplicitaContext(Declaracion_arregloContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionArregloExplicita(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaracion_arregloContext declaracion_arreglo() {
		Declaracion_arregloContext _localctx = new Declaracion_arregloContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaracion_arreglo);
		int _la;
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFICADOR:
				_localctx = new DeclaracionArregloExplicitaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				Match(IDENTIFICADOR);
				State = 65;
				Match(T__3);
				State = 66;
				Match(T__4);
				State = 67;
				Match(T__5);
				State = 68;
				Match(TIPO);
				State = 69;
				Match(T__6);
				{
				State = 70;
				expresion(0);
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__7) {
					{
					{
					State = 71;
					Match(T__7);
					State = 72;
					expresion(0);
					}
					}
					State = 77;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 78;
				Match(T__8);
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 79;
					Match(T__2);
					}
				}

				}
				break;
			case T__0:
				_localctx = new DeclaracionArregloPorDefectoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				Match(T__0);
				State = 83;
				Match(IDENTIFICADOR);
				State = 84;
				Match(T__4);
				State = 85;
				Match(T__5);
				State = 86;
				Match(TIPO);
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 87;
					Match(T__2);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaracion_matrizContext : ParserRuleContext {
		public Declaracion_matrizContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracion_matriz; } }
	 
		public Declaracion_matrizContext() { }
		public virtual void CopyFrom(Declaracion_matrizContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracionMatrizExplicitaContext : Declaracion_matrizContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DimensionesContext dimensiones() {
			return GetRuleContext<DimensionesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(LanguageParser.TIPO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Contenido_matrizContext contenido_matriz() {
			return GetRuleContext<Contenido_matrizContext>(0);
		}
		public DeclaracionMatrizExplicitaContext(Declaracion_matrizContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionMatrizExplicita(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaracion_matrizContext declaracion_matriz() {
		Declaracion_matrizContext _localctx = new Declaracion_matrizContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaracion_matriz);
		int _la;
		try {
			_localctx = new DeclaracionMatrizExplicitaContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(IDENTIFICADOR);
			State = 93;
			Match(T__3);
			State = 94;
			dimensiones();
			State = 95;
			Match(TIPO);
			State = 96;
			contenido_matriz();
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 97;
				Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DimensionesContext dimensiones() {
			return GetRuleContext<DimensionesContext>(0);
		}
		public DimensionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensiones; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimensiones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimensionesContext dimensiones() {
		DimensionesContext _localctx = new DimensionesContext(Context, State);
		EnterRule(_localctx, 10, RULE_dimensiones);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__4);
			State = 101;
			Match(T__5);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 102;
				dimensiones();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Contenido_matrizContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Elementos_matrizContext elementos_matriz() {
			return GetRuleContext<Elementos_matrizContext>(0);
		}
		public Contenido_matrizContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contenido_matriz; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContenido_matriz(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Contenido_matrizContext contenido_matriz() {
		Contenido_matrizContext _localctx = new Contenido_matrizContext(Context, State);
		EnterRule(_localctx, 12, RULE_contenido_matriz);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(T__6);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 106;
				elementos_matriz();
				}
			}

			State = 109;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elementos_matrizContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Elemento_matrizContext[] elemento_matriz() {
			return GetRuleContexts<Elemento_matrizContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elemento_matrizContext elemento_matriz(int i) {
			return GetRuleContext<Elemento_matrizContext>(i);
		}
		public Elementos_matrizContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementos_matriz; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementos_matriz(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elementos_matrizContext elementos_matriz() {
		Elementos_matrizContext _localctx = new Elementos_matrizContext(Context, State);
		EnterRule(_localctx, 14, RULE_elementos_matriz);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			elemento_matriz();
			State = 116;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 112;
					Match(T__7);
					State = 113;
					elemento_matriz();
					}
					} 
				}
				State = 118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 119;
				Match(T__7);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elemento_matrizContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Contenido_matrizContext contenido_matriz() {
			return GetRuleContext<Contenido_matrizContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lista_valoresContext lista_valores() {
			return GetRuleContext<Lista_valoresContext>(0);
		}
		public Elemento_matrizContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elemento_matriz; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElemento_matriz(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elemento_matrizContext elemento_matriz() {
		Elemento_matrizContext _localctx = new Elemento_matrizContext(Context, State);
		EnterRule(_localctx, 16, RULE_elemento_matriz);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				contenido_matriz();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				lista_valores();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lista_valoresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public Lista_valoresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lista_valores; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLista_valores(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lista_valoresContext lista_valores() {
		Lista_valoresContext _localctx = new Lista_valoresContext(Context, State);
		EnterRule(_localctx, 18, RULE_lista_valores);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(T__6);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732932105936896L) != 0)) {
				{
				State = 127;
				expresion(0);
				State = 132;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 128;
						Match(T__7);
						State = 129;
						expresion(0);
						}
						} 
					}
					State = 134;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__7) {
					{
					State = 135;
					Match(T__7);
					}
				}

				}
			}

			State = 140;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenciaContext : ParserRuleContext {
		public SentenciaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentencia; } }
	 
		public SentenciaContext() { }
		public virtual void CopyFrom(SentenciaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SentenciaReturnContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SentenciaReturnContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaBreakContext : SentenciaContext {
		public SentenciaBreakContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaBreak(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaForRangeContext : SentenciaContext {
		public IToken indice;
		public IToken valor;
		public IToken slice;
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFICADOR() { return GetTokens(LanguageParser.IDENTIFICADOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR(int i) {
			return GetToken(LanguageParser.IDENTIFICADOR, i);
		}
		public SentenciaForRangeContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaForRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaSwitchContext : SentenciaContext {
		public ExpresionContext condicion;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Casos_switchContext[] casos_switch() {
			return GetRuleContexts<Casos_switchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Casos_switchContext casos_switch(int i) {
			return GetRuleContext<Casos_switchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_switchContext default_switch() {
			return GetRuleContext<Default_switchContext>(0);
		}
		public SentenciaSwitchContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaContinueContext : SentenciaContext {
		public SentenciaContinueContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaContinue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpresionSentenciaContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ExpresionSentenciaContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresionSentencia(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BloqueContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public BloqueContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloque(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaIfContext : SentenciaContext {
		public ExpresionContext condicion;
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext[] sentencia() {
			return GetRuleContexts<SentenciaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia(int i) {
			return GetRuleContext<SentenciaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SentenciaIfContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaForSimpleContext : SentenciaContext {
		public ExpresionContext condicion;
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SentenciaForSimpleContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaForSimple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaPrintlnContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public FuncionEmbebidaPrintlnContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaPrintln(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaForCompuestaContext : SentenciaContext {
		public ExpresionContext condicion;
		public ExpresionContext incremento;
		[System.Diagnostics.DebuggerNonUserCode] public For_initContext for_init() {
			return GetRuleContext<For_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public SentenciaForCompuestaContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaForCompuesta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenciaContext sentencia() {
		SentenciaContext _localctx = new SentenciaContext(Context, State);
		EnterRule(_localctx, 20, RULE_sentencia);
		int _la;
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				_localctx = new ExpresionSentenciaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 142;
				expresion(0);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 143;
					Match(T__2);
					}
				}

				}
				break;
			case 2:
				_localctx = new FuncionEmbebidaPrintlnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 146;
				Match(T__9);
				State = 147;
				expresion(0);
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__7) {
					{
					{
					State = 148;
					Match(T__7);
					State = 149;
					expresion(0);
					}
					}
					State = 154;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 155;
				Match(T__10);
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 156;
					Match(T__2);
					}
				}

				}
				break;
			case 3:
				_localctx = new BloqueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 159;
				Match(T__6);
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732932107875458L) != 0)) {
					{
					{
					State = 160;
					declaraciones();
					}
					}
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 166;
				Match(T__8);
				}
				break;
			case 4:
				_localctx = new SentenciaIfContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 167;
				Match(T__11);
				State = 173;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 168;
					Match(T__12);
					State = 169;
					((SentenciaIfContext)_localctx).condicion = expresion(0);
					State = 170;
					Match(T__10);
					}
					break;
				case 2:
					{
					State = 172;
					((SentenciaIfContext)_localctx).condicion = expresion(0);
					}
					break;
				}
				State = 175;
				sentencia();
				State = 178;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 176;
					Match(T__13);
					State = 177;
					sentencia();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new SentenciaSwitchContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 180;
				Match(T__14);
				State = 186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 181;
					Match(T__12);
					State = 182;
					((SentenciaSwitchContext)_localctx).condicion = expresion(0);
					State = 183;
					Match(T__10);
					}
					break;
				case 2:
					{
					State = 185;
					((SentenciaSwitchContext)_localctx).condicion = expresion(0);
					}
					break;
				}
				State = 188;
				Match(T__6);
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__20) {
					{
					{
					State = 189;
					casos_switch();
					}
					}
					State = 194;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__22) {
					{
					State = 195;
					default_switch();
					}
				}

				State = 198;
				Match(T__8);
				}
				break;
			case 6:
				_localctx = new SentenciaForSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 200;
				Match(T__15);
				State = 206;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 201;
					Match(T__12);
					State = 202;
					((SentenciaForSimpleContext)_localctx).condicion = expresion(0);
					State = 203;
					Match(T__10);
					}
					break;
				case 2:
					{
					State = 205;
					((SentenciaForSimpleContext)_localctx).condicion = expresion(0);
					}
					break;
				}
				State = 208;
				sentencia();
				}
				break;
			case 7:
				_localctx = new SentenciaForCompuestaContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 210;
				Match(T__15);
				State = 211;
				for_init();
				State = 212;
				((SentenciaForCompuestaContext)_localctx).condicion = expresion(0);
				State = 213;
				Match(T__2);
				State = 214;
				((SentenciaForCompuestaContext)_localctx).incremento = expresion(0);
				State = 215;
				sentencia();
				}
				break;
			case 8:
				_localctx = new SentenciaForRangeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 217;
				Match(T__15);
				State = 218;
				((SentenciaForRangeContext)_localctx).indice = Match(IDENTIFICADOR);
				State = 219;
				Match(T__7);
				State = 220;
				((SentenciaForRangeContext)_localctx).valor = Match(IDENTIFICADOR);
				State = 221;
				Match(T__3);
				State = 222;
				Match(T__16);
				State = 223;
				((SentenciaForRangeContext)_localctx).slice = Match(IDENTIFICADOR);
				State = 224;
				sentencia();
				}
				break;
			case 9:
				_localctx = new SentenciaBreakContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 225;
				Match(T__17);
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 226;
					Match(T__2);
					}
				}

				}
				break;
			case 10:
				_localctx = new SentenciaContinueContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 229;
				Match(T__18);
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 230;
					Match(T__2);
					}
				}

				}
				break;
			case 11:
				_localctx = new SentenciaReturnContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 233;
				Match(T__19);
				State = 235;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 234;
					expresion(0);
					}
					break;
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 237;
					Match(T__2);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Casos_switchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public Casos_switchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_casos_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCasos_switch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Casos_switchContext casos_switch() {
		Casos_switchContext _localctx = new Casos_switchContext(Context, State);
		EnterRule(_localctx, 22, RULE_casos_switch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(T__20);
			State = 243;
			expresion(0);
			State = 244;
			Match(T__21);
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732932107875458L) != 0)) {
				{
				{
				State = 245;
				declaraciones();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_switchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public Default_switchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_switch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_switchContext default_switch() {
		Default_switchContext _localctx = new Default_switchContext(Context, State);
		EnterRule(_localctx, 24, RULE_default_switch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(T__22);
			State = 252;
			Match(T__21);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17732932107875458L) != 0)) {
				{
				{
				State = 253;
				declaraciones();
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaracion_variableContext declaracion_variable() {
			return GetRuleContext<Declaracion_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public For_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_init(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_initContext for_init() {
		For_initContext _localctx = new For_initContext(Context, State);
		EnterRule(_localctx, 26, RULE_for_init);
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259;
				declaracion_variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260;
				expresion(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
	 
		public ExpresionContext() { }
		public virtual void CopyFrom(ExpresionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AsignacionVariableContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AsignacionVariableContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccesoMatrizContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public AccesoMatrizContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccesoMatriz(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignacionMatrizContext : ExpresionContext {
		public ExpresionContext valornuevo;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public AsignacionMatrizContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionMatriz(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanoContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEANO() { return GetToken(LanguageParser.BOOLEANO, 0); }
		public BooleanoContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleano(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaSlicesIndexContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaSlicesIndexContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaSlicesIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegacionUnariaContext : ExpresionContext {
		public IToken operador;
		public ExpresionContext izquierda;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public NegacionUnariaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegacionUnaria(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignacionArregloContext : ExpresionContext {
		public ExpresionContext indice;
		public ExpresionContext valornuevo;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public AsignacionArregloContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionArreglo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumaRestaContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public SumaRestaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumaResta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicoAndContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public LogicoAndContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicoAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignacionVariableSumaContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AsignacionVariableSumaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionVariableSuma(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccesoArregloContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AccesoArregloContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccesoArreglo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaStringsJoinContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaStringsJoinContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaStringsJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicoOrContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public LogicoOrContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicoOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(LanguageParser.DECIMAL, 0); }
		public DecimalContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelacionalContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public RelacionalContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelacional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaAtoiContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaAtoiContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaAtoi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicacionDivisionModuloContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public MultiplicacionDivisionModuloContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicacionDivisionModulo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgualdadDesigualdadContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public IgualdadDesigualdadContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgualdadDesigualdad(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignacionVariableRestaContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AsignacionVariableRestaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionVariableResta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentesisContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ParentesisContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CadenaContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CADENA() { return GetToken(LanguageParser.CADENA, 0); }
		public CadenaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCadena(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegacionLogicaContext : ExpresionContext {
		public IToken operador;
		public ExpresionContext izquierda;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public NegacionLogicaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegacionLogica(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaracterContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARACTER() { return GetToken(LanguageParser.CARACTER, 0); }
		public CaracterContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaracter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaReflectTypeOfContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaReflectTypeOfContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaReflectTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnteroContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTERO() { return GetToken(LanguageParser.ENTERO, 0); }
		public EnteroContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntero(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaParseFloatContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaParseFloatContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaParseFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaLenContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		public FuncionEmbebidaLenContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaLen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaAppendContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaAppendContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaAppend(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentificadorContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		public IdentificadorContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentificador(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		return expresion(0);
	}

	private ExpresionContext expresion(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpresionContext _localctx = new ExpresionContext(Context, _parentState);
		ExpresionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expresion, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				_localctx = new FuncionEmbebidaAppendContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 264;
				Match(T__23);
				State = 265;
				Match(IDENTIFICADOR);
				State = 266;
				Match(T__7);
				State = 267;
				expresion(0);
				State = 268;
				Match(T__10);
				State = 270;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 269;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new FuncionEmbebidaAtoiContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 272;
				Match(T__24);
				State = 273;
				expresion(0);
				State = 274;
				Match(T__10);
				State = 276;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 275;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new FuncionEmbebidaParseFloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 278;
				Match(T__25);
				State = 279;
				expresion(0);
				State = 280;
				Match(T__10);
				State = 282;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 281;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 4:
				{
				_localctx = new FuncionEmbebidaReflectTypeOfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 284;
				Match(T__26);
				State = 285;
				expresion(0);
				State = 286;
				Match(T__10);
				State = 288;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 287;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 5:
				{
				_localctx = new FuncionEmbebidaSlicesIndexContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 290;
				Match(T__27);
				State = 291;
				Match(IDENTIFICADOR);
				State = 292;
				Match(T__7);
				State = 293;
				expresion(0);
				State = 294;
				Match(T__10);
				State = 296;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 295;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new FuncionEmbebidaStringsJoinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 298;
				Match(T__28);
				State = 299;
				Match(IDENTIFICADOR);
				State = 300;
				Match(T__7);
				State = 301;
				expresion(0);
				State = 302;
				Match(T__10);
				State = 304;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 303;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 7:
				{
				_localctx = new FuncionEmbebidaLenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 306;
				Match(T__29);
				State = 307;
				Match(IDENTIFICADOR);
				State = 308;
				Match(T__10);
				State = 310;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 309;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 8:
				{
				_localctx = new NegacionUnariaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 312;
				((NegacionUnariaContext)_localctx).operador = Match(T__30);
				State = 313;
				((NegacionUnariaContext)_localctx).izquierda = expresion(22);
				}
				break;
			case 9:
				{
				_localctx = new NegacionLogicaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 314;
				((NegacionLogicaContext)_localctx).operador = Match(T__31);
				State = 315;
				((NegacionLogicaContext)_localctx).izquierda = expresion(21);
				}
				break;
			case 10:
				{
				_localctx = new AccesoMatrizContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 316;
				Match(IDENTIFICADOR);
				State = 321;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 317;
						Match(T__4);
						State = 318;
						expresion(0);
						State = 319;
						Match(T__5);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 323;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 11:
				{
				_localctx = new AccesoArregloContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 325;
				Match(IDENTIFICADOR);
				State = 326;
				Match(T__4);
				State = 327;
				expresion(0);
				State = 328;
				Match(T__5);
				}
				break;
			case 12:
				{
				_localctx = new AsignacionArregloContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 330;
				Match(IDENTIFICADOR);
				State = 331;
				Match(T__4);
				State = 332;
				((AsignacionArregloContext)_localctx).indice = expresion(0);
				State = 333;
				Match(T__5);
				State = 334;
				Match(T__1);
				State = 335;
				((AsignacionArregloContext)_localctx).valornuevo = expresion(12);
				}
				break;
			case 13:
				{
				_localctx = new AsignacionMatrizContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 337;
				Match(IDENTIFICADOR);
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 338;
					Match(T__4);
					State = 339;
					expresion(0);
					State = 340;
					Match(T__5);
					}
					}
					State = 344;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__4 );
				State = 346;
				Match(T__1);
				State = 347;
				((AsignacionMatrizContext)_localctx).valornuevo = expresion(11);
				}
				break;
			case 14:
				{
				_localctx = new AsignacionVariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 349;
				Match(IDENTIFICADOR);
				State = 350;
				Match(T__1);
				State = 351;
				expresion(10);
				}
				break;
			case 15:
				{
				_localctx = new AsignacionVariableSumaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 352;
				Match(IDENTIFICADOR);
				State = 353;
				Match(T__44);
				State = 354;
				expresion(9);
				}
				break;
			case 16:
				{
				_localctx = new AsignacionVariableRestaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 355;
				Match(IDENTIFICADOR);
				State = 356;
				Match(T__45);
				State = 357;
				expresion(8);
				}
				break;
			case 17:
				{
				_localctx = new BooleanoContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 358;
				Match(BOOLEANO);
				}
				break;
			case 18:
				{
				_localctx = new DecimalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 359;
				Match(DECIMAL);
				}
				break;
			case 19:
				{
				_localctx = new CaracterContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 360;
				Match(CARACTER);
				}
				break;
			case 20:
				{
				_localctx = new CadenaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 361;
				Match(CADENA);
				}
				break;
			case 21:
				{
				_localctx = new EnteroContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 362;
				Match(ENTERO);
				}
				break;
			case 22:
				{
				_localctx = new IdentificadorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 363;
				Match(IDENTIFICADOR);
				}
				break;
			case 23:
				{
				_localctx = new ParentesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 364;
				Match(T__12);
				State = 365;
				expresion(0);
				State = 366;
				Match(T__10);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 390;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 388;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
					case 1:
						{
						_localctx = new MultiplicacionDivisionModuloContext(new ExpresionContext(_parentctx, _parentState));
						((MultiplicacionDivisionModuloContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 370;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 371;
						((MultiplicacionDivisionModuloContext)_localctx).operador = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60129542144L) != 0)) ) {
							((MultiplicacionDivisionModuloContext)_localctx).operador = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 372;
						((MultiplicacionDivisionModuloContext)_localctx).derecha = expresion(21);
						}
						break;
					case 2:
						{
						_localctx = new SumaRestaContext(new ExpresionContext(_parentctx, _parentState));
						((SumaRestaContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 373;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 374;
						((SumaRestaContext)_localctx).operador = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__30 || _la==T__35) ) {
							((SumaRestaContext)_localctx).operador = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 375;
						((SumaRestaContext)_localctx).derecha = expresion(20);
						}
						break;
					case 3:
						{
						_localctx = new RelacionalContext(new ExpresionContext(_parentctx, _parentState));
						((RelacionalContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 376;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 377;
						((RelacionalContext)_localctx).operador = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2061584302080L) != 0)) ) {
							((RelacionalContext)_localctx).operador = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 378;
						((RelacionalContext)_localctx).derecha = expresion(19);
						}
						break;
					case 4:
						{
						_localctx = new IgualdadDesigualdadContext(new ExpresionContext(_parentctx, _parentState));
						((IgualdadDesigualdadContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 379;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 380;
						((IgualdadDesigualdadContext)_localctx).operador = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__40 || _la==T__41) ) {
							((IgualdadDesigualdadContext)_localctx).operador = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 381;
						((IgualdadDesigualdadContext)_localctx).derecha = expresion(18);
						}
						break;
					case 5:
						{
						_localctx = new LogicoAndContext(new ExpresionContext(_parentctx, _parentState));
						((LogicoAndContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 382;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 383;
						((LogicoAndContext)_localctx).operador = Match(T__42);
						State = 384;
						((LogicoAndContext)_localctx).derecha = expresion(17);
						}
						break;
					case 6:
						{
						_localctx = new LogicoOrContext(new ExpresionContext(_parentctx, _parentState));
						((LogicoOrContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 385;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 386;
						((LogicoOrContext)_localctx).operador = Match(T__43);
						State = 387;
						((LogicoOrContext)_localctx).derecha = expresion(16);
						}
						break;
					}
					} 
				}
				State = 392;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expresion_sempred((ExpresionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expresion_sempred(ExpresionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,56,394,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,5,0,32,8,0,10,0,12,0,35,9,0,1,1,1,1,1,1,1,1,3,1,41,8,1,1,2,1,2,1,2,
		1,2,1,2,1,2,3,2,49,8,2,1,2,1,2,1,2,1,2,3,2,55,8,2,1,2,1,2,1,2,1,2,3,2,
		61,8,2,3,2,63,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,74,8,3,10,3,
		12,3,77,9,3,1,3,1,3,3,3,81,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,89,8,3,3,3,
		91,8,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,99,8,4,1,5,1,5,1,5,3,5,104,8,5,1,6,
		1,6,3,6,108,8,6,1,6,1,6,1,7,1,7,1,7,5,7,115,8,7,10,7,12,7,118,9,7,1,7,
		3,7,121,8,7,1,8,1,8,3,8,125,8,8,1,9,1,9,1,9,1,9,5,9,131,8,9,10,9,12,9,
		134,9,9,1,9,3,9,137,8,9,3,9,139,8,9,1,9,1,9,1,10,1,10,3,10,145,8,10,1,
		10,1,10,1,10,1,10,5,10,151,8,10,10,10,12,10,154,9,10,1,10,1,10,3,10,158,
		8,10,1,10,1,10,5,10,162,8,10,10,10,12,10,165,9,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,3,10,174,8,10,1,10,1,10,1,10,3,10,179,8,10,1,10,1,10,1,
		10,1,10,1,10,1,10,3,10,187,8,10,1,10,1,10,5,10,191,8,10,10,10,12,10,194,
		9,10,1,10,3,10,197,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,207,
		8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,3,10,228,8,10,1,10,1,10,3,10,232,8,10,1,
		10,1,10,3,10,236,8,10,1,10,3,10,239,8,10,3,10,241,8,10,1,11,1,11,1,11,
		1,11,5,11,247,8,11,10,11,12,11,250,9,11,1,12,1,12,1,12,5,12,255,8,12,10,
		12,12,12,258,9,12,1,13,1,13,3,13,262,8,13,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,3,14,271,8,14,1,14,1,14,1,14,1,14,3,14,277,8,14,1,14,1,14,1,14,1,
		14,3,14,283,8,14,1,14,1,14,1,14,1,14,3,14,289,8,14,1,14,1,14,1,14,1,14,
		1,14,1,14,3,14,297,8,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,305,8,14,1,
		14,1,14,1,14,1,14,3,14,311,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,4,14,322,8,14,11,14,12,14,323,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,4,14,343,8,14,11,14,
		12,14,344,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,369,8,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,5,14,389,8,14,10,14,12,14,392,9,14,1,14,0,1,28,15,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,0,4,1,0,33,35,2,0,31,31,36,36,1,0,37,40,
		1,0,41,42,464,0,33,1,0,0,0,2,40,1,0,0,0,4,62,1,0,0,0,6,90,1,0,0,0,8,92,
		1,0,0,0,10,100,1,0,0,0,12,105,1,0,0,0,14,111,1,0,0,0,16,124,1,0,0,0,18,
		126,1,0,0,0,20,240,1,0,0,0,22,242,1,0,0,0,24,251,1,0,0,0,26,261,1,0,0,
		0,28,368,1,0,0,0,30,32,3,2,1,0,31,30,1,0,0,0,32,35,1,0,0,0,33,31,1,0,0,
		0,33,34,1,0,0,0,34,1,1,0,0,0,35,33,1,0,0,0,36,41,3,8,4,0,37,41,3,6,3,0,
		38,41,3,4,2,0,39,41,3,20,10,0,40,36,1,0,0,0,40,37,1,0,0,0,40,38,1,0,0,
		0,40,39,1,0,0,0,41,3,1,0,0,0,42,43,5,1,0,0,43,44,5,53,0,0,44,45,5,47,0,
		0,45,46,5,2,0,0,46,48,3,28,14,0,47,49,5,3,0,0,48,47,1,0,0,0,48,49,1,0,
		0,0,49,63,1,0,0,0,50,51,5,1,0,0,51,52,5,53,0,0,52,54,5,47,0,0,53,55,5,
		3,0,0,54,53,1,0,0,0,54,55,1,0,0,0,55,63,1,0,0,0,56,57,5,53,0,0,57,58,5,
		4,0,0,58,60,3,28,14,0,59,61,5,3,0,0,60,59,1,0,0,0,60,61,1,0,0,0,61,63,
		1,0,0,0,62,42,1,0,0,0,62,50,1,0,0,0,62,56,1,0,0,0,63,5,1,0,0,0,64,65,5,
		53,0,0,65,66,5,4,0,0,66,67,5,5,0,0,67,68,5,6,0,0,68,69,5,47,0,0,69,70,
		5,7,0,0,70,75,3,28,14,0,71,72,5,8,0,0,72,74,3,28,14,0,73,71,1,0,0,0,74,
		77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,
		80,5,9,0,0,79,81,5,3,0,0,80,79,1,0,0,0,80,81,1,0,0,0,81,91,1,0,0,0,82,
		83,5,1,0,0,83,84,5,53,0,0,84,85,5,5,0,0,85,86,5,6,0,0,86,88,5,47,0,0,87,
		89,5,3,0,0,88,87,1,0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,64,1,0,0,0,90,
		82,1,0,0,0,91,7,1,0,0,0,92,93,5,53,0,0,93,94,5,4,0,0,94,95,3,10,5,0,95,
		96,5,47,0,0,96,98,3,12,6,0,97,99,5,3,0,0,98,97,1,0,0,0,98,99,1,0,0,0,99,
		9,1,0,0,0,100,101,5,5,0,0,101,103,5,6,0,0,102,104,3,10,5,0,103,102,1,0,
		0,0,103,104,1,0,0,0,104,11,1,0,0,0,105,107,5,7,0,0,106,108,3,14,7,0,107,
		106,1,0,0,0,107,108,1,0,0,0,108,109,1,0,0,0,109,110,5,9,0,0,110,13,1,0,
		0,0,111,116,3,16,8,0,112,113,5,8,0,0,113,115,3,16,8,0,114,112,1,0,0,0,
		115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,120,1,0,0,0,118,116,
		1,0,0,0,119,121,5,8,0,0,120,119,1,0,0,0,120,121,1,0,0,0,121,15,1,0,0,0,
		122,125,3,12,6,0,123,125,3,18,9,0,124,122,1,0,0,0,124,123,1,0,0,0,125,
		17,1,0,0,0,126,138,5,7,0,0,127,132,3,28,14,0,128,129,5,8,0,0,129,131,3,
		28,14,0,130,128,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,
		0,133,136,1,0,0,0,134,132,1,0,0,0,135,137,5,8,0,0,136,135,1,0,0,0,136,
		137,1,0,0,0,137,139,1,0,0,0,138,127,1,0,0,0,138,139,1,0,0,0,139,140,1,
		0,0,0,140,141,5,9,0,0,141,19,1,0,0,0,142,144,3,28,14,0,143,145,5,3,0,0,
		144,143,1,0,0,0,144,145,1,0,0,0,145,241,1,0,0,0,146,147,5,10,0,0,147,152,
		3,28,14,0,148,149,5,8,0,0,149,151,3,28,14,0,150,148,1,0,0,0,151,154,1,
		0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,155,1,0,0,0,154,152,1,0,0,0,
		155,157,5,11,0,0,156,158,5,3,0,0,157,156,1,0,0,0,157,158,1,0,0,0,158,241,
		1,0,0,0,159,163,5,7,0,0,160,162,3,2,1,0,161,160,1,0,0,0,162,165,1,0,0,
		0,163,161,1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,
		241,5,9,0,0,167,173,5,12,0,0,168,169,5,13,0,0,169,170,3,28,14,0,170,171,
		5,11,0,0,171,174,1,0,0,0,172,174,3,28,14,0,173,168,1,0,0,0,173,172,1,0,
		0,0,174,175,1,0,0,0,175,178,3,20,10,0,176,177,5,14,0,0,177,179,3,20,10,
		0,178,176,1,0,0,0,178,179,1,0,0,0,179,241,1,0,0,0,180,186,5,15,0,0,181,
		182,5,13,0,0,182,183,3,28,14,0,183,184,5,11,0,0,184,187,1,0,0,0,185,187,
		3,28,14,0,186,181,1,0,0,0,186,185,1,0,0,0,187,188,1,0,0,0,188,192,5,7,
		0,0,189,191,3,22,11,0,190,189,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,
		192,193,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,195,197,3,24,12,0,196,
		195,1,0,0,0,196,197,1,0,0,0,197,198,1,0,0,0,198,199,5,9,0,0,199,241,1,
		0,0,0,200,206,5,16,0,0,201,202,5,13,0,0,202,203,3,28,14,0,203,204,5,11,
		0,0,204,207,1,0,0,0,205,207,3,28,14,0,206,201,1,0,0,0,206,205,1,0,0,0,
		207,208,1,0,0,0,208,209,3,20,10,0,209,241,1,0,0,0,210,211,5,16,0,0,211,
		212,3,26,13,0,212,213,3,28,14,0,213,214,5,3,0,0,214,215,3,28,14,0,215,
		216,3,20,10,0,216,241,1,0,0,0,217,218,5,16,0,0,218,219,5,53,0,0,219,220,
		5,8,0,0,220,221,5,53,0,0,221,222,5,4,0,0,222,223,5,17,0,0,223,224,5,53,
		0,0,224,241,3,20,10,0,225,227,5,18,0,0,226,228,5,3,0,0,227,226,1,0,0,0,
		227,228,1,0,0,0,228,241,1,0,0,0,229,231,5,19,0,0,230,232,5,3,0,0,231,230,
		1,0,0,0,231,232,1,0,0,0,232,241,1,0,0,0,233,235,5,20,0,0,234,236,3,28,
		14,0,235,234,1,0,0,0,235,236,1,0,0,0,236,238,1,0,0,0,237,239,5,3,0,0,238,
		237,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,142,1,0,0,0,240,146,1,
		0,0,0,240,159,1,0,0,0,240,167,1,0,0,0,240,180,1,0,0,0,240,200,1,0,0,0,
		240,210,1,0,0,0,240,217,1,0,0,0,240,225,1,0,0,0,240,229,1,0,0,0,240,233,
		1,0,0,0,241,21,1,0,0,0,242,243,5,21,0,0,243,244,3,28,14,0,244,248,5,22,
		0,0,245,247,3,2,1,0,246,245,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,
		249,1,0,0,0,249,23,1,0,0,0,250,248,1,0,0,0,251,252,5,23,0,0,252,256,5,
		22,0,0,253,255,3,2,1,0,254,253,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,
		256,257,1,0,0,0,257,25,1,0,0,0,258,256,1,0,0,0,259,262,3,4,2,0,260,262,
		3,28,14,0,261,259,1,0,0,0,261,260,1,0,0,0,262,27,1,0,0,0,263,264,6,14,
		-1,0,264,265,5,24,0,0,265,266,5,53,0,0,266,267,5,8,0,0,267,268,3,28,14,
		0,268,270,5,11,0,0,269,271,5,3,0,0,270,269,1,0,0,0,270,271,1,0,0,0,271,
		369,1,0,0,0,272,273,5,25,0,0,273,274,3,28,14,0,274,276,5,11,0,0,275,277,
		5,3,0,0,276,275,1,0,0,0,276,277,1,0,0,0,277,369,1,0,0,0,278,279,5,26,0,
		0,279,280,3,28,14,0,280,282,5,11,0,0,281,283,5,3,0,0,282,281,1,0,0,0,282,
		283,1,0,0,0,283,369,1,0,0,0,284,285,5,27,0,0,285,286,3,28,14,0,286,288,
		5,11,0,0,287,289,5,3,0,0,288,287,1,0,0,0,288,289,1,0,0,0,289,369,1,0,0,
		0,290,291,5,28,0,0,291,292,5,53,0,0,292,293,5,8,0,0,293,294,3,28,14,0,
		294,296,5,11,0,0,295,297,5,3,0,0,296,295,1,0,0,0,296,297,1,0,0,0,297,369,
		1,0,0,0,298,299,5,29,0,0,299,300,5,53,0,0,300,301,5,8,0,0,301,302,3,28,
		14,0,302,304,5,11,0,0,303,305,5,3,0,0,304,303,1,0,0,0,304,305,1,0,0,0,
		305,369,1,0,0,0,306,307,5,30,0,0,307,308,5,53,0,0,308,310,5,11,0,0,309,
		311,5,3,0,0,310,309,1,0,0,0,310,311,1,0,0,0,311,369,1,0,0,0,312,313,5,
		31,0,0,313,369,3,28,14,22,314,315,5,32,0,0,315,369,3,28,14,21,316,321,
		5,53,0,0,317,318,5,5,0,0,318,319,3,28,14,0,319,320,5,6,0,0,320,322,1,0,
		0,0,321,317,1,0,0,0,322,323,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,
		369,1,0,0,0,325,326,5,53,0,0,326,327,5,5,0,0,327,328,3,28,14,0,328,329,
		5,6,0,0,329,369,1,0,0,0,330,331,5,53,0,0,331,332,5,5,0,0,332,333,3,28,
		14,0,333,334,5,6,0,0,334,335,5,2,0,0,335,336,3,28,14,12,336,369,1,0,0,
		0,337,342,5,53,0,0,338,339,5,5,0,0,339,340,3,28,14,0,340,341,5,6,0,0,341,
		343,1,0,0,0,342,338,1,0,0,0,343,344,1,0,0,0,344,342,1,0,0,0,344,345,1,
		0,0,0,345,346,1,0,0,0,346,347,5,2,0,0,347,348,3,28,14,11,348,369,1,0,0,
		0,349,350,5,53,0,0,350,351,5,2,0,0,351,369,3,28,14,10,352,353,5,53,0,0,
		353,354,5,45,0,0,354,369,3,28,14,9,355,356,5,53,0,0,356,357,5,46,0,0,357,
		369,3,28,14,8,358,369,5,51,0,0,359,369,5,49,0,0,360,369,5,52,0,0,361,369,
		5,50,0,0,362,369,5,48,0,0,363,369,5,53,0,0,364,365,5,13,0,0,365,366,3,
		28,14,0,366,367,5,11,0,0,367,369,1,0,0,0,368,263,1,0,0,0,368,272,1,0,0,
		0,368,278,1,0,0,0,368,284,1,0,0,0,368,290,1,0,0,0,368,298,1,0,0,0,368,
		306,1,0,0,0,368,312,1,0,0,0,368,314,1,0,0,0,368,316,1,0,0,0,368,325,1,
		0,0,0,368,330,1,0,0,0,368,337,1,0,0,0,368,349,1,0,0,0,368,352,1,0,0,0,
		368,355,1,0,0,0,368,358,1,0,0,0,368,359,1,0,0,0,368,360,1,0,0,0,368,361,
		1,0,0,0,368,362,1,0,0,0,368,363,1,0,0,0,368,364,1,0,0,0,369,390,1,0,0,
		0,370,371,10,20,0,0,371,372,7,0,0,0,372,389,3,28,14,21,373,374,10,19,0,
		0,374,375,7,1,0,0,375,389,3,28,14,20,376,377,10,18,0,0,377,378,7,2,0,0,
		378,389,3,28,14,19,379,380,10,17,0,0,380,381,7,3,0,0,381,389,3,28,14,18,
		382,383,10,16,0,0,383,384,5,43,0,0,384,389,3,28,14,17,385,386,10,15,0,
		0,386,387,5,44,0,0,387,389,3,28,14,16,388,370,1,0,0,0,388,373,1,0,0,0,
		388,376,1,0,0,0,388,379,1,0,0,0,388,382,1,0,0,0,388,385,1,0,0,0,389,392,
		1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,29,1,0,0,0,392,390,1,0,0,0,
		49,33,40,48,54,60,62,75,80,88,90,98,103,107,116,120,124,132,136,138,144,
		152,157,163,173,178,186,192,196,206,227,231,235,238,240,248,256,261,270,
		276,282,288,296,304,310,323,344,368,388,390
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Analizador
