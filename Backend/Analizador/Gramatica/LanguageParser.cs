//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Gramatica/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Analizador {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		TIPO=46, ENTERO=47, DECIMAL=48, CADENA=49, BOOLEANO=50, CARACTER=51, IDENTIFICADOR=52, 
		WS=53, COMENTARIOL=54, COMENTARIOLN=55;
	public const int
		RULE_program = 0, RULE_declaraciones = 1, RULE_declaracion_variable = 2, 
		RULE_declaracion_arreglo = 3, RULE_sentencia = 4, RULE_casos_switch = 5, 
		RULE_default_switch = 6, RULE_for_init = 7, RULE_expresion = 8;
	public static readonly string[] ruleNames = {
		"program", "declaraciones", "declaracion_variable", "declaracion_arreglo", 
		"sentencia", "casos_switch", "default_switch", "for_init", "expresion"
	};

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'='", "';'", "':='", "'['", "']'", "'{'", "','", "'}'", 
		"'fmt.Println('", "')'", "'if'", "'('", "'else'", "'switch'", "'for'", 
		"'break'", "'continue'", "'return'", "'case'", "':'", "'default'", "'append('", 
		"'strconv.Atoi('", "'strconv.ParseFloat('", "'reflect.TypeOf('", "'slices.Index('", 
		"'strings.Join('", "'len('", "'-'", "'!'", "'*'", "'/'", "'%'", "'+'", 
		"'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'&&'", "'||'", "'+='", 
		"'-='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "TIPO", "ENTERO", 
		"DECIMAL", "CADENA", "BOOLEANO", "CARACTER", "IDENTIFICADOR", "WS", "COMENTARIOL", 
		"COMENTARIOLN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8866466053993602L) != 0)) {
				{
				{
				State = 18;
				declaraciones();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaracion_arregloContext declaracion_arreglo() {
			return GetRuleContext<Declaracion_arregloContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaracion_variableContext declaracion_variable() {
			return GetRuleContext<Declaracion_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		public DeclaracionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaraciones; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaraciones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionesContext declaraciones() {
		DeclaracionesContext _localctx = new DeclaracionesContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaraciones);
		try {
			State = 27;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24;
				declaracion_arreglo();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 25;
				declaracion_variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 26;
				sentencia();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaracion_variableContext : ParserRuleContext {
		public Declaracion_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracion_variable; } }
	 
		public Declaracion_variableContext() { }
		public virtual void CopyFrom(Declaracion_variableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracionPorDefectoContext : Declaracion_variableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(LanguageParser.TIPO, 0); }
		public DeclaracionPorDefectoContext(Declaracion_variableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionPorDefecto(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionExplicitaContext : Declaracion_variableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(LanguageParser.TIPO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public DeclaracionExplicitaContext(Declaracion_variableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionExplicita(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionImplicitaContext : Declaracion_variableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public DeclaracionImplicitaContext(Declaracion_variableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionImplicita(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaracion_variableContext declaracion_variable() {
		Declaracion_variableContext _localctx = new Declaracion_variableContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaracion_variable);
		int _la;
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new DeclaracionExplicitaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 29;
				Match(T__0);
				State = 30;
				Match(IDENTIFICADOR);
				State = 31;
				Match(TIPO);
				State = 32;
				Match(T__1);
				State = 33;
				expresion(0);
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 34;
					Match(T__2);
					}
				}

				}
				break;
			case 2:
				_localctx = new DeclaracionPorDefectoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 37;
				Match(T__0);
				State = 38;
				Match(IDENTIFICADOR);
				State = 39;
				Match(TIPO);
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 40;
					Match(T__2);
					}
				}

				}
				break;
			case 3:
				_localctx = new DeclaracionImplicitaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 43;
				Match(IDENTIFICADOR);
				State = 44;
				Match(T__3);
				State = 45;
				expresion(0);
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 46;
					Match(T__2);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaracion_arregloContext : ParserRuleContext {
		public Declaracion_arregloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracion_arreglo; } }
	 
		public Declaracion_arregloContext() { }
		public virtual void CopyFrom(Declaracion_arregloContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracionArregloPorDefectoContext : Declaracion_arregloContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(LanguageParser.TIPO, 0); }
		public DeclaracionArregloPorDefectoContext(Declaracion_arregloContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionArregloPorDefecto(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionArregloExplicitaContext : Declaracion_arregloContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(LanguageParser.TIPO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public DeclaracionArregloExplicitaContext(Declaracion_arregloContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionArregloExplicita(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaracion_arregloContext declaracion_arreglo() {
		Declaracion_arregloContext _localctx = new Declaracion_arregloContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaracion_arreglo);
		int _la;
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFICADOR:
				_localctx = new DeclaracionArregloExplicitaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				Match(IDENTIFICADOR);
				State = 52;
				Match(T__3);
				State = 53;
				Match(T__4);
				State = 54;
				Match(T__5);
				State = 55;
				Match(TIPO);
				State = 56;
				Match(T__6);
				{
				State = 57;
				expresion(0);
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__7) {
					{
					{
					State = 58;
					Match(T__7);
					State = 59;
					expresion(0);
					}
					}
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 65;
				Match(T__8);
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 66;
					Match(T__2);
					}
				}

				}
				break;
			case T__0:
				_localctx = new DeclaracionArregloPorDefectoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				Match(T__0);
				State = 70;
				Match(IDENTIFICADOR);
				State = 71;
				Match(T__4);
				State = 72;
				Match(T__5);
				State = 73;
				Match(TIPO);
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 74;
					Match(T__2);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenciaContext : ParserRuleContext {
		public SentenciaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentencia; } }
	 
		public SentenciaContext() { }
		public virtual void CopyFrom(SentenciaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SentenciaReturnContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SentenciaReturnContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaBreakContext : SentenciaContext {
		public SentenciaBreakContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaBreak(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaSwitchContext : SentenciaContext {
		public ExpresionContext condicion;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Casos_switchContext[] casos_switch() {
			return GetRuleContexts<Casos_switchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Casos_switchContext casos_switch(int i) {
			return GetRuleContext<Casos_switchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_switchContext default_switch() {
			return GetRuleContext<Default_switchContext>(0);
		}
		public SentenciaSwitchContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaContinueContext : SentenciaContext {
		public SentenciaContinueContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaContinue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpresionSentenciaContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ExpresionSentenciaContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresionSentencia(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BloqueContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public BloqueContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloque(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaIfContext : SentenciaContext {
		public ExpresionContext condicion;
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext[] sentencia() {
			return GetRuleContexts<SentenciaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia(int i) {
			return GetRuleContext<SentenciaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SentenciaIfContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaForSimpleContext : SentenciaContext {
		public ExpresionContext condicion;
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SentenciaForSimpleContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaForSimple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaPrintlnContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public FuncionEmbebidaPrintlnContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaPrintln(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaForCompuestaContext : SentenciaContext {
		public ExpresionContext condicion;
		public ExpresionContext incremento;
		[System.Diagnostics.DebuggerNonUserCode] public For_initContext for_init() {
			return GetRuleContext<For_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public SentenciaForCompuestaContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaForCompuesta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenciaContext sentencia() {
		SentenciaContext _localctx = new SentenciaContext(Context, State);
		EnterRule(_localctx, 8, RULE_sentencia);
		int _la;
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				_localctx = new ExpresionSentenciaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 79;
				expresion(0);
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 80;
					Match(T__2);
					}
				}

				}
				break;
			case 2:
				_localctx = new FuncionEmbebidaPrintlnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 83;
				Match(T__9);
				State = 84;
				expresion(0);
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__7) {
					{
					{
					State = 85;
					Match(T__7);
					State = 86;
					expresion(0);
					}
					}
					State = 91;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 92;
				Match(T__10);
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 93;
					Match(T__2);
					}
				}

				}
				break;
			case 3:
				_localctx = new BloqueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 96;
				Match(T__6);
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8866466053993602L) != 0)) {
					{
					{
					State = 97;
					declaraciones();
					}
					}
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 103;
				Match(T__8);
				}
				break;
			case 4:
				_localctx = new SentenciaIfContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 104;
				Match(T__11);
				State = 110;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 105;
					Match(T__12);
					State = 106;
					((SentenciaIfContext)_localctx).condicion = expresion(0);
					State = 107;
					Match(T__10);
					}
					break;
				case 2:
					{
					State = 109;
					((SentenciaIfContext)_localctx).condicion = expresion(0);
					}
					break;
				}
				State = 112;
				sentencia();
				State = 115;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 113;
					Match(T__13);
					State = 114;
					sentencia();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new SentenciaSwitchContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 117;
				Match(T__14);
				State = 123;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 118;
					Match(T__12);
					State = 119;
					((SentenciaSwitchContext)_localctx).condicion = expresion(0);
					State = 120;
					Match(T__10);
					}
					break;
				case 2:
					{
					State = 122;
					((SentenciaSwitchContext)_localctx).condicion = expresion(0);
					}
					break;
				}
				State = 125;
				Match(T__6);
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__19) {
					{
					{
					State = 126;
					casos_switch();
					}
					}
					State = 131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__21) {
					{
					State = 132;
					default_switch();
					}
				}

				State = 135;
				Match(T__8);
				}
				break;
			case 6:
				_localctx = new SentenciaForSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 137;
				Match(T__15);
				State = 143;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 138;
					Match(T__12);
					State = 139;
					((SentenciaForSimpleContext)_localctx).condicion = expresion(0);
					State = 140;
					Match(T__10);
					}
					break;
				case 2:
					{
					State = 142;
					((SentenciaForSimpleContext)_localctx).condicion = expresion(0);
					}
					break;
				}
				State = 145;
				sentencia();
				}
				break;
			case 7:
				_localctx = new SentenciaForCompuestaContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 147;
				Match(T__15);
				State = 148;
				for_init();
				State = 149;
				((SentenciaForCompuestaContext)_localctx).condicion = expresion(0);
				State = 150;
				Match(T__2);
				State = 151;
				((SentenciaForCompuestaContext)_localctx).incremento = expresion(0);
				State = 152;
				sentencia();
				}
				break;
			case 8:
				_localctx = new SentenciaBreakContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 154;
				Match(T__16);
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 155;
					Match(T__2);
					}
				}

				}
				break;
			case 9:
				_localctx = new SentenciaContinueContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 158;
				Match(T__17);
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 159;
					Match(T__2);
					}
				}

				}
				break;
			case 10:
				_localctx = new SentenciaReturnContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 162;
				Match(T__18);
				State = 164;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 163;
					expresion(0);
					}
					break;
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 166;
					Match(T__2);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Casos_switchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public Casos_switchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_casos_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCasos_switch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Casos_switchContext casos_switch() {
		Casos_switchContext _localctx = new Casos_switchContext(Context, State);
		EnterRule(_localctx, 10, RULE_casos_switch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(T__19);
			State = 172;
			expresion(0);
			State = 173;
			Match(T__20);
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8866466053993602L) != 0)) {
				{
				{
				State = 174;
				declaraciones();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_switchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public Default_switchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_switch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_switchContext default_switch() {
		Default_switchContext _localctx = new Default_switchContext(Context, State);
		EnterRule(_localctx, 12, RULE_default_switch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(T__21);
			State = 181;
			Match(T__20);
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8866466053993602L) != 0)) {
				{
				{
				State = 182;
				declaraciones();
				}
				}
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaracion_variableContext declaracion_variable() {
			return GetRuleContext<Declaracion_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public For_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_init(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_initContext for_init() {
		For_initContext _localctx = new For_initContext(Context, State);
		EnterRule(_localctx, 14, RULE_for_init);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188;
				declaracion_variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189;
				expresion(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
	 
		public ExpresionContext() { }
		public virtual void CopyFrom(ExpresionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AsignacionVariableContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AsignacionVariableContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanoContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEANO() { return GetToken(LanguageParser.BOOLEANO, 0); }
		public BooleanoContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleano(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaSlicesIndexContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaSlicesIndexContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaSlicesIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegacionUnariaContext : ExpresionContext {
		public IToken operador;
		public ExpresionContext izquierda;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public NegacionUnariaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegacionUnaria(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignacionArregloContext : ExpresionContext {
		public ExpresionContext indice;
		public ExpresionContext valornuevo;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public AsignacionArregloContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionArreglo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumaRestaContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public SumaRestaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumaResta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicoAndContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public LogicoAndContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicoAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignacionVariableSumaContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AsignacionVariableSumaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionVariableSuma(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccesoArregloContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AccesoArregloContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccesoArreglo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaStringsJoinContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaStringsJoinContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaStringsJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicoOrContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public LogicoOrContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicoOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(LanguageParser.DECIMAL, 0); }
		public DecimalContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelacionalContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public RelacionalContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelacional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaAtoiContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaAtoiContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaAtoi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicacionDivisionModuloContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public MultiplicacionDivisionModuloContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicacionDivisionModulo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgualdadDesigualdadContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public IgualdadDesigualdadContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgualdadDesigualdad(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignacionVariableRestaContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AsignacionVariableRestaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionVariableResta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentesisContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ParentesisContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CadenaContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CADENA() { return GetToken(LanguageParser.CADENA, 0); }
		public CadenaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCadena(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegacionLogicaContext : ExpresionContext {
		public IToken operador;
		public ExpresionContext izquierda;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public NegacionLogicaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegacionLogica(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaracterContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARACTER() { return GetToken(LanguageParser.CARACTER, 0); }
		public CaracterContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaracter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaReflectTypeOfContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaReflectTypeOfContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaReflectTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnteroContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTERO() { return GetToken(LanguageParser.ENTERO, 0); }
		public EnteroContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntero(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaParseFloatContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaParseFloatContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaParseFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaLenContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		public FuncionEmbebidaLenContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaLen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaAppendContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaAppendContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaAppend(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentificadorContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		public IdentificadorContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentificador(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		return expresion(0);
	}

	private ExpresionContext expresion(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpresionContext _localctx = new ExpresionContext(Context, _parentState);
		ExpresionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expresion, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				_localctx = new FuncionEmbebidaAppendContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 193;
				Match(T__22);
				State = 194;
				Match(IDENTIFICADOR);
				State = 195;
				Match(T__7);
				State = 196;
				expresion(0);
				State = 197;
				Match(T__10);
				State = 199;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 198;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new FuncionEmbebidaAtoiContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 201;
				Match(T__23);
				State = 202;
				expresion(0);
				State = 203;
				Match(T__10);
				State = 205;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 204;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new FuncionEmbebidaParseFloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 207;
				Match(T__24);
				State = 208;
				expresion(0);
				State = 209;
				Match(T__10);
				State = 211;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 210;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 4:
				{
				_localctx = new FuncionEmbebidaReflectTypeOfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 213;
				Match(T__25);
				State = 214;
				expresion(0);
				State = 215;
				Match(T__10);
				State = 217;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 216;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 5:
				{
				_localctx = new FuncionEmbebidaSlicesIndexContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 219;
				Match(T__26);
				State = 220;
				Match(IDENTIFICADOR);
				State = 221;
				Match(T__7);
				State = 222;
				expresion(0);
				State = 223;
				Match(T__10);
				State = 225;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 224;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new FuncionEmbebidaStringsJoinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 227;
				Match(T__27);
				State = 228;
				Match(IDENTIFICADOR);
				State = 229;
				Match(T__7);
				State = 230;
				expresion(0);
				State = 231;
				Match(T__10);
				State = 233;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 232;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 7:
				{
				_localctx = new FuncionEmbebidaLenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 235;
				Match(T__28);
				State = 236;
				Match(IDENTIFICADOR);
				State = 237;
				Match(T__10);
				State = 239;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 238;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 8:
				{
				_localctx = new NegacionUnariaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 241;
				((NegacionUnariaContext)_localctx).operador = Match(T__29);
				State = 242;
				((NegacionUnariaContext)_localctx).izquierda = expresion(20);
				}
				break;
			case 9:
				{
				_localctx = new NegacionLogicaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 243;
				((NegacionLogicaContext)_localctx).operador = Match(T__30);
				State = 244;
				((NegacionLogicaContext)_localctx).izquierda = expresion(19);
				}
				break;
			case 10:
				{
				_localctx = new AccesoArregloContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 245;
				Match(IDENTIFICADOR);
				State = 246;
				Match(T__4);
				State = 247;
				expresion(0);
				State = 248;
				Match(T__5);
				}
				break;
			case 11:
				{
				_localctx = new AsignacionArregloContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 250;
				Match(IDENTIFICADOR);
				State = 251;
				Match(T__4);
				State = 252;
				((AsignacionArregloContext)_localctx).indice = expresion(0);
				State = 253;
				Match(T__5);
				State = 254;
				Match(T__1);
				State = 255;
				((AsignacionArregloContext)_localctx).valornuevo = expresion(11);
				}
				break;
			case 12:
				{
				_localctx = new AsignacionVariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 257;
				Match(IDENTIFICADOR);
				State = 258;
				Match(T__1);
				State = 259;
				expresion(10);
				}
				break;
			case 13:
				{
				_localctx = new AsignacionVariableSumaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 260;
				Match(IDENTIFICADOR);
				State = 261;
				Match(T__43);
				State = 262;
				expresion(9);
				}
				break;
			case 14:
				{
				_localctx = new AsignacionVariableRestaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 263;
				Match(IDENTIFICADOR);
				State = 264;
				Match(T__44);
				State = 265;
				expresion(8);
				}
				break;
			case 15:
				{
				_localctx = new BooleanoContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 266;
				Match(BOOLEANO);
				}
				break;
			case 16:
				{
				_localctx = new DecimalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 267;
				Match(DECIMAL);
				}
				break;
			case 17:
				{
				_localctx = new CaracterContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 268;
				Match(CARACTER);
				}
				break;
			case 18:
				{
				_localctx = new CadenaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 269;
				Match(CADENA);
				}
				break;
			case 19:
				{
				_localctx = new EnteroContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 270;
				Match(ENTERO);
				}
				break;
			case 20:
				{
				_localctx = new IdentificadorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 271;
				Match(IDENTIFICADOR);
				}
				break;
			case 21:
				{
				_localctx = new ParentesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 272;
				Match(T__12);
				State = 273;
				expresion(0);
				State = 274;
				Match(T__10);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 298;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 296;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new MultiplicacionDivisionModuloContext(new ExpresionContext(_parentctx, _parentState));
						((MultiplicacionDivisionModuloContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 278;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 279;
						((MultiplicacionDivisionModuloContext)_localctx).operador = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30064771072L) != 0)) ) {
							((MultiplicacionDivisionModuloContext)_localctx).operador = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 280;
						((MultiplicacionDivisionModuloContext)_localctx).derecha = expresion(19);
						}
						break;
					case 2:
						{
						_localctx = new SumaRestaContext(new ExpresionContext(_parentctx, _parentState));
						((SumaRestaContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 281;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 282;
						((SumaRestaContext)_localctx).operador = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__29 || _la==T__34) ) {
							((SumaRestaContext)_localctx).operador = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 283;
						((SumaRestaContext)_localctx).derecha = expresion(18);
						}
						break;
					case 3:
						{
						_localctx = new RelacionalContext(new ExpresionContext(_parentctx, _parentState));
						((RelacionalContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 284;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 285;
						((RelacionalContext)_localctx).operador = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1030792151040L) != 0)) ) {
							((RelacionalContext)_localctx).operador = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 286;
						((RelacionalContext)_localctx).derecha = expresion(17);
						}
						break;
					case 4:
						{
						_localctx = new IgualdadDesigualdadContext(new ExpresionContext(_parentctx, _parentState));
						((IgualdadDesigualdadContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 287;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 288;
						((IgualdadDesigualdadContext)_localctx).operador = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__39 || _la==T__40) ) {
							((IgualdadDesigualdadContext)_localctx).operador = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 289;
						((IgualdadDesigualdadContext)_localctx).derecha = expresion(16);
						}
						break;
					case 5:
						{
						_localctx = new LogicoAndContext(new ExpresionContext(_parentctx, _parentState));
						((LogicoAndContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 290;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 291;
						((LogicoAndContext)_localctx).operador = Match(T__41);
						State = 292;
						((LogicoAndContext)_localctx).derecha = expresion(15);
						}
						break;
					case 6:
						{
						_localctx = new LogicoOrContext(new ExpresionContext(_parentctx, _parentState));
						((LogicoOrContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 293;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 294;
						((LogicoOrContext)_localctx).operador = Match(T__42);
						State = 295;
						((LogicoOrContext)_localctx).derecha = expresion(14);
						}
						break;
					}
					} 
				}
				State = 300;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expresion_sempred((ExpresionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expresion_sempred(ExpresionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 18);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,55,302,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,5,0,20,8,0,10,0,12,0,23,9,0,1,1,1,1,1,1,3,1,28,8,1,1,2,
		1,2,1,2,1,2,1,2,1,2,3,2,36,8,2,1,2,1,2,1,2,1,2,3,2,42,8,2,1,2,1,2,1,2,
		1,2,3,2,48,8,2,3,2,50,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,61,8,
		3,10,3,12,3,64,9,3,1,3,1,3,3,3,68,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,76,8,
		3,3,3,78,8,3,1,4,1,4,3,4,82,8,4,1,4,1,4,1,4,1,4,5,4,88,8,4,10,4,12,4,91,
		9,4,1,4,1,4,3,4,95,8,4,1,4,1,4,5,4,99,8,4,10,4,12,4,102,9,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,3,4,111,8,4,1,4,1,4,1,4,3,4,116,8,4,1,4,1,4,1,4,1,4,
		1,4,1,4,3,4,124,8,4,1,4,1,4,5,4,128,8,4,10,4,12,4,131,9,4,1,4,3,4,134,
		8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,144,8,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,3,4,157,8,4,1,4,1,4,3,4,161,8,4,1,4,1,4,3,4,165,
		8,4,1,4,3,4,168,8,4,3,4,170,8,4,1,5,1,5,1,5,1,5,5,5,176,8,5,10,5,12,5,
		179,9,5,1,6,1,6,1,6,5,6,184,8,6,10,6,12,6,187,9,6,1,7,1,7,3,7,191,8,7,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,200,8,8,1,8,1,8,1,8,1,8,3,8,206,8,8,1,
		8,1,8,1,8,1,8,3,8,212,8,8,1,8,1,8,1,8,1,8,3,8,218,8,8,1,8,1,8,1,8,1,8,
		1,8,1,8,3,8,226,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,234,8,8,1,8,1,8,1,8,1,
		8,3,8,240,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,3,8,277,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,297,8,8,10,8,12,8,300,9,8,1,8,0,1,16,9,
		0,2,4,6,8,10,12,14,16,0,4,1,0,32,34,2,0,30,30,35,35,1,0,36,39,1,0,40,41,
		363,0,21,1,0,0,0,2,27,1,0,0,0,4,49,1,0,0,0,6,77,1,0,0,0,8,169,1,0,0,0,
		10,171,1,0,0,0,12,180,1,0,0,0,14,190,1,0,0,0,16,276,1,0,0,0,18,20,3,2,
		1,0,19,18,1,0,0,0,20,23,1,0,0,0,21,19,1,0,0,0,21,22,1,0,0,0,22,1,1,0,0,
		0,23,21,1,0,0,0,24,28,3,6,3,0,25,28,3,4,2,0,26,28,3,8,4,0,27,24,1,0,0,
		0,27,25,1,0,0,0,27,26,1,0,0,0,28,3,1,0,0,0,29,30,5,1,0,0,30,31,5,52,0,
		0,31,32,5,46,0,0,32,33,5,2,0,0,33,35,3,16,8,0,34,36,5,3,0,0,35,34,1,0,
		0,0,35,36,1,0,0,0,36,50,1,0,0,0,37,38,5,1,0,0,38,39,5,52,0,0,39,41,5,46,
		0,0,40,42,5,3,0,0,41,40,1,0,0,0,41,42,1,0,0,0,42,50,1,0,0,0,43,44,5,52,
		0,0,44,45,5,4,0,0,45,47,3,16,8,0,46,48,5,3,0,0,47,46,1,0,0,0,47,48,1,0,
		0,0,48,50,1,0,0,0,49,29,1,0,0,0,49,37,1,0,0,0,49,43,1,0,0,0,50,5,1,0,0,
		0,51,52,5,52,0,0,52,53,5,4,0,0,53,54,5,5,0,0,54,55,5,6,0,0,55,56,5,46,
		0,0,56,57,5,7,0,0,57,62,3,16,8,0,58,59,5,8,0,0,59,61,3,16,8,0,60,58,1,
		0,0,0,61,64,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,65,1,0,0,0,64,62,1,
		0,0,0,65,67,5,9,0,0,66,68,5,3,0,0,67,66,1,0,0,0,67,68,1,0,0,0,68,78,1,
		0,0,0,69,70,5,1,0,0,70,71,5,52,0,0,71,72,5,5,0,0,72,73,5,6,0,0,73,75,5,
		46,0,0,74,76,5,3,0,0,75,74,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,51,1,
		0,0,0,77,69,1,0,0,0,78,7,1,0,0,0,79,81,3,16,8,0,80,82,5,3,0,0,81,80,1,
		0,0,0,81,82,1,0,0,0,82,170,1,0,0,0,83,84,5,10,0,0,84,89,3,16,8,0,85,86,
		5,8,0,0,86,88,3,16,8,0,87,85,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,
		1,0,0,0,90,92,1,0,0,0,91,89,1,0,0,0,92,94,5,11,0,0,93,95,5,3,0,0,94,93,
		1,0,0,0,94,95,1,0,0,0,95,170,1,0,0,0,96,100,5,7,0,0,97,99,3,2,1,0,98,97,
		1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,103,1,0,0,0,
		102,100,1,0,0,0,103,170,5,9,0,0,104,110,5,12,0,0,105,106,5,13,0,0,106,
		107,3,16,8,0,107,108,5,11,0,0,108,111,1,0,0,0,109,111,3,16,8,0,110,105,
		1,0,0,0,110,109,1,0,0,0,111,112,1,0,0,0,112,115,3,8,4,0,113,114,5,14,0,
		0,114,116,3,8,4,0,115,113,1,0,0,0,115,116,1,0,0,0,116,170,1,0,0,0,117,
		123,5,15,0,0,118,119,5,13,0,0,119,120,3,16,8,0,120,121,5,11,0,0,121,124,
		1,0,0,0,122,124,3,16,8,0,123,118,1,0,0,0,123,122,1,0,0,0,124,125,1,0,0,
		0,125,129,5,7,0,0,126,128,3,10,5,0,127,126,1,0,0,0,128,131,1,0,0,0,129,
		127,1,0,0,0,129,130,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,132,134,3,
		12,6,0,133,132,1,0,0,0,133,134,1,0,0,0,134,135,1,0,0,0,135,136,5,9,0,0,
		136,170,1,0,0,0,137,143,5,16,0,0,138,139,5,13,0,0,139,140,3,16,8,0,140,
		141,5,11,0,0,141,144,1,0,0,0,142,144,3,16,8,0,143,138,1,0,0,0,143,142,
		1,0,0,0,144,145,1,0,0,0,145,146,3,8,4,0,146,170,1,0,0,0,147,148,5,16,0,
		0,148,149,3,14,7,0,149,150,3,16,8,0,150,151,5,3,0,0,151,152,3,16,8,0,152,
		153,3,8,4,0,153,170,1,0,0,0,154,156,5,17,0,0,155,157,5,3,0,0,156,155,1,
		0,0,0,156,157,1,0,0,0,157,170,1,0,0,0,158,160,5,18,0,0,159,161,5,3,0,0,
		160,159,1,0,0,0,160,161,1,0,0,0,161,170,1,0,0,0,162,164,5,19,0,0,163,165,
		3,16,8,0,164,163,1,0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,168,5,3,0,
		0,167,166,1,0,0,0,167,168,1,0,0,0,168,170,1,0,0,0,169,79,1,0,0,0,169,83,
		1,0,0,0,169,96,1,0,0,0,169,104,1,0,0,0,169,117,1,0,0,0,169,137,1,0,0,0,
		169,147,1,0,0,0,169,154,1,0,0,0,169,158,1,0,0,0,169,162,1,0,0,0,170,9,
		1,0,0,0,171,172,5,20,0,0,172,173,3,16,8,0,173,177,5,21,0,0,174,176,3,2,
		1,0,175,174,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,
		11,1,0,0,0,179,177,1,0,0,0,180,181,5,22,0,0,181,185,5,21,0,0,182,184,3,
		2,1,0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,
		186,13,1,0,0,0,187,185,1,0,0,0,188,191,3,4,2,0,189,191,3,16,8,0,190,188,
		1,0,0,0,190,189,1,0,0,0,191,15,1,0,0,0,192,193,6,8,-1,0,193,194,5,23,0,
		0,194,195,5,52,0,0,195,196,5,8,0,0,196,197,3,16,8,0,197,199,5,11,0,0,198,
		200,5,3,0,0,199,198,1,0,0,0,199,200,1,0,0,0,200,277,1,0,0,0,201,202,5,
		24,0,0,202,203,3,16,8,0,203,205,5,11,0,0,204,206,5,3,0,0,205,204,1,0,0,
		0,205,206,1,0,0,0,206,277,1,0,0,0,207,208,5,25,0,0,208,209,3,16,8,0,209,
		211,5,11,0,0,210,212,5,3,0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,277,1,
		0,0,0,213,214,5,26,0,0,214,215,3,16,8,0,215,217,5,11,0,0,216,218,5,3,0,
		0,217,216,1,0,0,0,217,218,1,0,0,0,218,277,1,0,0,0,219,220,5,27,0,0,220,
		221,5,52,0,0,221,222,5,8,0,0,222,223,3,16,8,0,223,225,5,11,0,0,224,226,
		5,3,0,0,225,224,1,0,0,0,225,226,1,0,0,0,226,277,1,0,0,0,227,228,5,28,0,
		0,228,229,5,52,0,0,229,230,5,8,0,0,230,231,3,16,8,0,231,233,5,11,0,0,232,
		234,5,3,0,0,233,232,1,0,0,0,233,234,1,0,0,0,234,277,1,0,0,0,235,236,5,
		29,0,0,236,237,5,52,0,0,237,239,5,11,0,0,238,240,5,3,0,0,239,238,1,0,0,
		0,239,240,1,0,0,0,240,277,1,0,0,0,241,242,5,30,0,0,242,277,3,16,8,20,243,
		244,5,31,0,0,244,277,3,16,8,19,245,246,5,52,0,0,246,247,5,5,0,0,247,248,
		3,16,8,0,248,249,5,6,0,0,249,277,1,0,0,0,250,251,5,52,0,0,251,252,5,5,
		0,0,252,253,3,16,8,0,253,254,5,6,0,0,254,255,5,2,0,0,255,256,3,16,8,11,
		256,277,1,0,0,0,257,258,5,52,0,0,258,259,5,2,0,0,259,277,3,16,8,10,260,
		261,5,52,0,0,261,262,5,44,0,0,262,277,3,16,8,9,263,264,5,52,0,0,264,265,
		5,45,0,0,265,277,3,16,8,8,266,277,5,50,0,0,267,277,5,48,0,0,268,277,5,
		51,0,0,269,277,5,49,0,0,270,277,5,47,0,0,271,277,5,52,0,0,272,273,5,13,
		0,0,273,274,3,16,8,0,274,275,5,11,0,0,275,277,1,0,0,0,276,192,1,0,0,0,
		276,201,1,0,0,0,276,207,1,0,0,0,276,213,1,0,0,0,276,219,1,0,0,0,276,227,
		1,0,0,0,276,235,1,0,0,0,276,241,1,0,0,0,276,243,1,0,0,0,276,245,1,0,0,
		0,276,250,1,0,0,0,276,257,1,0,0,0,276,260,1,0,0,0,276,263,1,0,0,0,276,
		266,1,0,0,0,276,267,1,0,0,0,276,268,1,0,0,0,276,269,1,0,0,0,276,270,1,
		0,0,0,276,271,1,0,0,0,276,272,1,0,0,0,277,298,1,0,0,0,278,279,10,18,0,
		0,279,280,7,0,0,0,280,297,3,16,8,19,281,282,10,17,0,0,282,283,7,1,0,0,
		283,297,3,16,8,18,284,285,10,16,0,0,285,286,7,2,0,0,286,297,3,16,8,17,
		287,288,10,15,0,0,288,289,7,3,0,0,289,297,3,16,8,16,290,291,10,14,0,0,
		291,292,5,42,0,0,292,297,3,16,8,15,293,294,10,13,0,0,294,295,5,43,0,0,
		295,297,3,16,8,14,296,278,1,0,0,0,296,281,1,0,0,0,296,284,1,0,0,0,296,
		287,1,0,0,0,296,290,1,0,0,0,296,293,1,0,0,0,297,300,1,0,0,0,298,296,1,
		0,0,0,298,299,1,0,0,0,299,17,1,0,0,0,300,298,1,0,0,0,38,21,27,35,41,47,
		49,62,67,75,77,81,89,94,100,110,115,123,129,133,143,156,160,164,167,169,
		177,185,190,199,205,211,217,225,233,239,276,296,298
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Analizador
