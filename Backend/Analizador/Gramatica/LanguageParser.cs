//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Gramatica/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Analizador {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, TIPO=45, ENTERO=46, 
		DECIMAL=47, CADENA=48, BOOLEANO=49, CARACTER=50, IDENTIFICADOR=51, WS=52, 
		COMENTARIOL=53, COMENTARIOLN=54;
	public const int
		RULE_program = 0, RULE_declaraciones = 1, RULE_declaracion_variable = 2, 
		RULE_declaracion_arreglo = 3, RULE_sentencia = 4, RULE_casos_switch = 5, 
		RULE_default_switch = 6, RULE_expresion = 7;
	public static readonly string[] ruleNames = {
		"program", "declaraciones", "declaracion_variable", "declaracion_arreglo", 
		"sentencia", "casos_switch", "default_switch", "expresion"
	};

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'='", "';'", "':='", "'['", "']'", "'{'", "','", "'}'", 
		"'fmt.Println('", "')'", "'if'", "'('", "'else'", "'switch'", "'break'", 
		"'continue'", "'return'", "'case'", "':'", "'default'", "'append('", "'strconv.Atoi('", 
		"'strconv.ParseFloat('", "'reflect.TypeOf('", "'slices.Index('", "'strings.Join('", 
		"'len('", "'-'", "'!'", "'*'", "'/'", "'%'", "'+'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'&&'", "'||'", "'+='", "'-='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "TIPO", "ENTERO", 
		"DECIMAL", "CADENA", "BOOLEANO", "CARACTER", "IDENTIFICADOR", "WS", "COMENTARIOL", 
		"COMENTARIOLN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4433233026987138L) != 0)) {
				{
				{
				State = 16;
				declaraciones();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaracion_arregloContext declaracion_arreglo() {
			return GetRuleContext<Declaracion_arregloContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaracion_variableContext declaracion_variable() {
			return GetRuleContext<Declaracion_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		public DeclaracionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaraciones; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaraciones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionesContext declaraciones() {
		DeclaracionesContext _localctx = new DeclaracionesContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaraciones);
		try {
			State = 25;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 22;
				declaracion_arreglo();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 23;
				declaracion_variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 24;
				sentencia();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaracion_variableContext : ParserRuleContext {
		public Declaracion_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracion_variable; } }
	 
		public Declaracion_variableContext() { }
		public virtual void CopyFrom(Declaracion_variableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracionPorDefectoContext : Declaracion_variableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(LanguageParser.TIPO, 0); }
		public DeclaracionPorDefectoContext(Declaracion_variableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionPorDefecto(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionExplicitaContext : Declaracion_variableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(LanguageParser.TIPO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public DeclaracionExplicitaContext(Declaracion_variableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionExplicita(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionImplicitaContext : Declaracion_variableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public DeclaracionImplicitaContext(Declaracion_variableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionImplicita(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaracion_variableContext declaracion_variable() {
		Declaracion_variableContext _localctx = new Declaracion_variableContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaracion_variable);
		int _la;
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new DeclaracionExplicitaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 27;
				Match(T__0);
				State = 28;
				Match(IDENTIFICADOR);
				State = 29;
				Match(TIPO);
				State = 30;
				Match(T__1);
				State = 31;
				expresion(0);
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 32;
					Match(T__2);
					}
				}

				}
				break;
			case 2:
				_localctx = new DeclaracionPorDefectoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 35;
				Match(T__0);
				State = 36;
				Match(IDENTIFICADOR);
				State = 37;
				Match(TIPO);
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 38;
					Match(T__2);
					}
				}

				}
				break;
			case 3:
				_localctx = new DeclaracionImplicitaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 41;
				Match(IDENTIFICADOR);
				State = 42;
				Match(T__3);
				State = 43;
				expresion(0);
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 44;
					Match(T__2);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaracion_arregloContext : ParserRuleContext {
		public Declaracion_arregloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracion_arreglo; } }
	 
		public Declaracion_arregloContext() { }
		public virtual void CopyFrom(Declaracion_arregloContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracionArregloPorDefectoContext : Declaracion_arregloContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(LanguageParser.TIPO, 0); }
		public DeclaracionArregloPorDefectoContext(Declaracion_arregloContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionArregloPorDefecto(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionArregloExplicitaContext : Declaracion_arregloContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(LanguageParser.TIPO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public DeclaracionArregloExplicitaContext(Declaracion_arregloContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionArregloExplicita(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaracion_arregloContext declaracion_arreglo() {
		Declaracion_arregloContext _localctx = new Declaracion_arregloContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaracion_arreglo);
		int _la;
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFICADOR:
				_localctx = new DeclaracionArregloExplicitaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 49;
				Match(IDENTIFICADOR);
				State = 50;
				Match(T__3);
				State = 51;
				Match(T__4);
				State = 52;
				Match(T__5);
				State = 53;
				Match(TIPO);
				State = 54;
				Match(T__6);
				{
				State = 55;
				expresion(0);
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__7) {
					{
					{
					State = 56;
					Match(T__7);
					State = 57;
					expresion(0);
					}
					}
					State = 62;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 63;
				Match(T__8);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 64;
					Match(T__2);
					}
				}

				}
				break;
			case T__0:
				_localctx = new DeclaracionArregloPorDefectoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				Match(T__0);
				State = 68;
				Match(IDENTIFICADOR);
				State = 69;
				Match(T__4);
				State = 70;
				Match(T__5);
				State = 71;
				Match(TIPO);
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 72;
					Match(T__2);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenciaContext : ParserRuleContext {
		public SentenciaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentencia; } }
	 
		public SentenciaContext() { }
		public virtual void CopyFrom(SentenciaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SentenciaReturnContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SentenciaReturnContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaBreakContext : SentenciaContext {
		public SentenciaBreakContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaBreak(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaSwitchContext : SentenciaContext {
		public ExpresionContext condicion;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Casos_switchContext[] casos_switch() {
			return GetRuleContexts<Casos_switchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Casos_switchContext casos_switch(int i) {
			return GetRuleContext<Casos_switchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_switchContext default_switch() {
			return GetRuleContext<Default_switchContext>(0);
		}
		public SentenciaSwitchContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaContinueContext : SentenciaContext {
		public SentenciaContinueContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaContinue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpresionSentenciaContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ExpresionSentenciaContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresionSentencia(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BloqueContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public BloqueContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloque(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SentenciaIfContext : SentenciaContext {
		public ExpresionContext condicion;
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext[] sentencia() {
			return GetRuleContexts<SentenciaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia(int i) {
			return GetRuleContext<SentenciaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SentenciaIfContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciaIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaPrintlnContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public FuncionEmbebidaPrintlnContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaPrintln(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenciaContext sentencia() {
		SentenciaContext _localctx = new SentenciaContext(Context, State);
		EnterRule(_localctx, 8, RULE_sentencia);
		int _la;
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case ENTERO:
			case DECIMAL:
			case CADENA:
			case BOOLEANO:
			case CARACTER:
			case IDENTIFICADOR:
				_localctx = new ExpresionSentenciaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 77;
				expresion(0);
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 78;
					Match(T__2);
					}
				}

				}
				break;
			case T__9:
				_localctx = new FuncionEmbebidaPrintlnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 81;
				Match(T__9);
				State = 82;
				expresion(0);
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__7) {
					{
					{
					State = 83;
					Match(T__7);
					State = 84;
					expresion(0);
					}
					}
					State = 89;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 90;
				Match(T__10);
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 91;
					Match(T__2);
					}
				}

				}
				break;
			case T__6:
				_localctx = new BloqueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 94;
				Match(T__6);
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4433233026987138L) != 0)) {
					{
					{
					State = 95;
					declaraciones();
					}
					}
					State = 100;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 101;
				Match(T__8);
				}
				break;
			case T__11:
				_localctx = new SentenciaIfContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 102;
				Match(T__11);
				State = 108;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 103;
					Match(T__12);
					State = 104;
					((SentenciaIfContext)_localctx).condicion = expresion(0);
					State = 105;
					Match(T__10);
					}
					break;
				case 2:
					{
					State = 107;
					((SentenciaIfContext)_localctx).condicion = expresion(0);
					}
					break;
				}
				State = 110;
				sentencia();
				State = 113;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 111;
					Match(T__13);
					State = 112;
					sentencia();
					}
					break;
				}
				}
				break;
			case T__14:
				_localctx = new SentenciaSwitchContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 115;
				Match(T__14);
				State = 121;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 116;
					Match(T__12);
					State = 117;
					((SentenciaSwitchContext)_localctx).condicion = expresion(0);
					State = 118;
					Match(T__10);
					}
					break;
				case 2:
					{
					State = 120;
					((SentenciaSwitchContext)_localctx).condicion = expresion(0);
					}
					break;
				}
				State = 123;
				Match(T__6);
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__18) {
					{
					{
					State = 124;
					casos_switch();
					}
					}
					State = 129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__20) {
					{
					State = 130;
					default_switch();
					}
				}

				State = 133;
				Match(T__8);
				}
				break;
			case T__15:
				_localctx = new SentenciaBreakContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 135;
				Match(T__15);
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 136;
					Match(T__2);
					}
				}

				}
				break;
			case T__16:
				_localctx = new SentenciaContinueContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 139;
				Match(T__16);
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 140;
					Match(T__2);
					}
				}

				}
				break;
			case T__17:
				_localctx = new SentenciaReturnContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 143;
				Match(T__17);
				State = 145;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 144;
					expresion(0);
					}
					break;
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 147;
					Match(T__2);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Casos_switchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public Casos_switchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_casos_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCasos_switch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Casos_switchContext casos_switch() {
		Casos_switchContext _localctx = new Casos_switchContext(Context, State);
		EnterRule(_localctx, 10, RULE_casos_switch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(T__18);
			State = 153;
			expresion(0);
			State = 154;
			Match(T__19);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4433233026987138L) != 0)) {
				{
				{
				State = 155;
				declaraciones();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_switchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public Default_switchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_switch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_switchContext default_switch() {
		Default_switchContext _localctx = new Default_switchContext(Context, State);
		EnterRule(_localctx, 12, RULE_default_switch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(T__20);
			State = 162;
			Match(T__19);
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4433233026987138L) != 0)) {
				{
				{
				State = 163;
				declaraciones();
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
	 
		public ExpresionContext() { }
		public virtual void CopyFrom(ExpresionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AsignacionVariableContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AsignacionVariableContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanoContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEANO() { return GetToken(LanguageParser.BOOLEANO, 0); }
		public BooleanoContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleano(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaSlicesIndexContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaSlicesIndexContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaSlicesIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegacionUnariaContext : ExpresionContext {
		public IToken operador;
		public ExpresionContext izquierda;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public NegacionUnariaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegacionUnaria(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignacionArregloContext : ExpresionContext {
		public ExpresionContext indice;
		public ExpresionContext valornuevo;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public AsignacionArregloContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionArreglo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumaRestaContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public SumaRestaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumaResta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicoAndContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public LogicoAndContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicoAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignacionVariableSumaContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AsignacionVariableSumaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionVariableSuma(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccesoArregloContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AccesoArregloContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccesoArreglo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaStringsJoinContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaStringsJoinContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaStringsJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicoOrContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public LogicoOrContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicoOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(LanguageParser.DECIMAL, 0); }
		public DecimalContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelacionalContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public RelacionalContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelacional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaAtoiContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaAtoiContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaAtoi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicacionDivisionModuloContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public MultiplicacionDivisionModuloContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicacionDivisionModulo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgualdadDesigualdadContext : ExpresionContext {
		public ExpresionContext izquierda;
		public IToken operador;
		public ExpresionContext derecha;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public IgualdadDesigualdadContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgualdadDesigualdad(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignacionVariableRestaContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AsignacionVariableRestaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionVariableResta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentesisContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ParentesisContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CadenaContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CADENA() { return GetToken(LanguageParser.CADENA, 0); }
		public CadenaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCadena(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegacionLogicaContext : ExpresionContext {
		public IToken operador;
		public ExpresionContext izquierda;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public NegacionLogicaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegacionLogica(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaracterContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARACTER() { return GetToken(LanguageParser.CARACTER, 0); }
		public CaracterContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaracter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaReflectTypeOfContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaReflectTypeOfContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaReflectTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnteroContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTERO() { return GetToken(LanguageParser.ENTERO, 0); }
		public EnteroContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntero(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaParseFloatContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaParseFloatContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaParseFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaLenContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		public FuncionEmbebidaLenContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaLen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionEmbebidaAppendContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FuncionEmbebidaAppendContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionEmbebidaAppend(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentificadorContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		public IdentificadorContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentificador(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		return expresion(0);
	}

	private ExpresionContext expresion(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpresionContext _localctx = new ExpresionContext(Context, _parentState);
		ExpresionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expresion, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				_localctx = new FuncionEmbebidaAppendContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 170;
				Match(T__21);
				State = 171;
				Match(IDENTIFICADOR);
				State = 172;
				Match(T__7);
				State = 173;
				expresion(0);
				State = 174;
				Match(T__10);
				State = 176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 175;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new FuncionEmbebidaAtoiContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 178;
				Match(T__22);
				State = 179;
				expresion(0);
				State = 180;
				Match(T__10);
				State = 182;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 181;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new FuncionEmbebidaParseFloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 184;
				Match(T__23);
				State = 185;
				expresion(0);
				State = 186;
				Match(T__10);
				State = 188;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 187;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 4:
				{
				_localctx = new FuncionEmbebidaReflectTypeOfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 190;
				Match(T__24);
				State = 191;
				expresion(0);
				State = 192;
				Match(T__10);
				State = 194;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 193;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 5:
				{
				_localctx = new FuncionEmbebidaSlicesIndexContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 196;
				Match(T__25);
				State = 197;
				Match(IDENTIFICADOR);
				State = 198;
				Match(T__7);
				State = 199;
				expresion(0);
				State = 200;
				Match(T__10);
				State = 202;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 201;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new FuncionEmbebidaStringsJoinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 204;
				Match(T__26);
				State = 205;
				Match(IDENTIFICADOR);
				State = 206;
				Match(T__7);
				State = 207;
				expresion(0);
				State = 208;
				Match(T__10);
				State = 210;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 209;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 7:
				{
				_localctx = new FuncionEmbebidaLenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 212;
				Match(T__27);
				State = 213;
				Match(IDENTIFICADOR);
				State = 214;
				Match(T__10);
				State = 216;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 215;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 8:
				{
				_localctx = new NegacionUnariaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 218;
				((NegacionUnariaContext)_localctx).operador = Match(T__28);
				State = 219;
				((NegacionUnariaContext)_localctx).izquierda = expresion(20);
				}
				break;
			case 9:
				{
				_localctx = new NegacionLogicaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 220;
				((NegacionLogicaContext)_localctx).operador = Match(T__29);
				State = 221;
				((NegacionLogicaContext)_localctx).izquierda = expresion(19);
				}
				break;
			case 10:
				{
				_localctx = new AccesoArregloContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 222;
				Match(IDENTIFICADOR);
				State = 223;
				Match(T__4);
				State = 224;
				expresion(0);
				State = 225;
				Match(T__5);
				}
				break;
			case 11:
				{
				_localctx = new AsignacionArregloContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 227;
				Match(IDENTIFICADOR);
				State = 228;
				Match(T__4);
				State = 229;
				((AsignacionArregloContext)_localctx).indice = expresion(0);
				State = 230;
				Match(T__5);
				State = 231;
				Match(T__1);
				State = 232;
				((AsignacionArregloContext)_localctx).valornuevo = expresion(11);
				}
				break;
			case 12:
				{
				_localctx = new AsignacionVariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 234;
				Match(IDENTIFICADOR);
				State = 235;
				Match(T__1);
				State = 236;
				expresion(10);
				}
				break;
			case 13:
				{
				_localctx = new AsignacionVariableSumaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 237;
				Match(IDENTIFICADOR);
				State = 238;
				Match(T__42);
				State = 239;
				expresion(9);
				}
				break;
			case 14:
				{
				_localctx = new AsignacionVariableRestaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 240;
				Match(IDENTIFICADOR);
				State = 241;
				Match(T__43);
				State = 242;
				expresion(8);
				}
				break;
			case 15:
				{
				_localctx = new BooleanoContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 243;
				Match(BOOLEANO);
				}
				break;
			case 16:
				{
				_localctx = new DecimalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 244;
				Match(DECIMAL);
				}
				break;
			case 17:
				{
				_localctx = new CaracterContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 245;
				Match(CARACTER);
				}
				break;
			case 18:
				{
				_localctx = new CadenaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 246;
				Match(CADENA);
				}
				break;
			case 19:
				{
				_localctx = new EnteroContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 247;
				Match(ENTERO);
				}
				break;
			case 20:
				{
				_localctx = new IdentificadorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 248;
				Match(IDENTIFICADOR);
				}
				break;
			case 21:
				{
				_localctx = new ParentesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 249;
				Match(T__12);
				State = 250;
				expresion(0);
				State = 251;
				Match(T__10);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 275;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 273;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
					case 1:
						{
						_localctx = new MultiplicacionDivisionModuloContext(new ExpresionContext(_parentctx, _parentState));
						((MultiplicacionDivisionModuloContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 255;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 256;
						((MultiplicacionDivisionModuloContext)_localctx).operador = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15032385536L) != 0)) ) {
							((MultiplicacionDivisionModuloContext)_localctx).operador = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 257;
						((MultiplicacionDivisionModuloContext)_localctx).derecha = expresion(19);
						}
						break;
					case 2:
						{
						_localctx = new SumaRestaContext(new ExpresionContext(_parentctx, _parentState));
						((SumaRestaContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 258;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 259;
						((SumaRestaContext)_localctx).operador = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__28 || _la==T__33) ) {
							((SumaRestaContext)_localctx).operador = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 260;
						((SumaRestaContext)_localctx).derecha = expresion(18);
						}
						break;
					case 3:
						{
						_localctx = new RelacionalContext(new ExpresionContext(_parentctx, _parentState));
						((RelacionalContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 261;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 262;
						((RelacionalContext)_localctx).operador = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 515396075520L) != 0)) ) {
							((RelacionalContext)_localctx).operador = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 263;
						((RelacionalContext)_localctx).derecha = expresion(17);
						}
						break;
					case 4:
						{
						_localctx = new IgualdadDesigualdadContext(new ExpresionContext(_parentctx, _parentState));
						((IgualdadDesigualdadContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 264;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 265;
						((IgualdadDesigualdadContext)_localctx).operador = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__38 || _la==T__39) ) {
							((IgualdadDesigualdadContext)_localctx).operador = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 266;
						((IgualdadDesigualdadContext)_localctx).derecha = expresion(16);
						}
						break;
					case 5:
						{
						_localctx = new LogicoAndContext(new ExpresionContext(_parentctx, _parentState));
						((LogicoAndContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 267;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 268;
						((LogicoAndContext)_localctx).operador = Match(T__40);
						State = 269;
						((LogicoAndContext)_localctx).derecha = expresion(15);
						}
						break;
					case 6:
						{
						_localctx = new LogicoOrContext(new ExpresionContext(_parentctx, _parentState));
						((LogicoOrContext)_localctx).izquierda = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 270;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 271;
						((LogicoOrContext)_localctx).operador = Match(T__41);
						State = 272;
						((LogicoOrContext)_localctx).derecha = expresion(14);
						}
						break;
					}
					} 
				}
				State = 277;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expresion_sempred((ExpresionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expresion_sempred(ExpresionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 18);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,54,279,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,5,0,18,8,0,10,0,12,0,21,9,0,1,1,1,1,1,1,3,1,26,8,1,1,2,1,2,1,2,
		1,2,1,2,1,2,3,2,34,8,2,1,2,1,2,1,2,1,2,3,2,40,8,2,1,2,1,2,1,2,1,2,3,2,
		46,8,2,3,2,48,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,59,8,3,10,3,
		12,3,62,9,3,1,3,1,3,3,3,66,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,74,8,3,3,3,
		76,8,3,1,4,1,4,3,4,80,8,4,1,4,1,4,1,4,1,4,5,4,86,8,4,10,4,12,4,89,9,4,
		1,4,1,4,3,4,93,8,4,1,4,1,4,5,4,97,8,4,10,4,12,4,100,9,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,3,4,109,8,4,1,4,1,4,1,4,3,4,114,8,4,1,4,1,4,1,4,1,4,1,4,
		1,4,3,4,122,8,4,1,4,1,4,5,4,126,8,4,10,4,12,4,129,9,4,1,4,3,4,132,8,4,
		1,4,1,4,1,4,1,4,3,4,138,8,4,1,4,1,4,3,4,142,8,4,1,4,1,4,3,4,146,8,4,1,
		4,3,4,149,8,4,3,4,151,8,4,1,5,1,5,1,5,1,5,5,5,157,8,5,10,5,12,5,160,9,
		5,1,6,1,6,1,6,5,6,165,8,6,10,6,12,6,168,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,3,7,177,8,7,1,7,1,7,1,7,1,7,3,7,183,8,7,1,7,1,7,1,7,1,7,3,7,189,8,7,
		1,7,1,7,1,7,1,7,3,7,195,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,203,8,7,1,7,1,
		7,1,7,1,7,1,7,1,7,3,7,211,8,7,1,7,1,7,1,7,1,7,3,7,217,8,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,254,8,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,5,7,274,8,7,10,7,12,7,277,9,7,1,7,0,1,14,8,0,2,4,6,8,10,12,14,0,4,1,
		0,31,33,2,0,29,29,34,34,1,0,35,38,1,0,39,40,337,0,19,1,0,0,0,2,25,1,0,
		0,0,4,47,1,0,0,0,6,75,1,0,0,0,8,150,1,0,0,0,10,152,1,0,0,0,12,161,1,0,
		0,0,14,253,1,0,0,0,16,18,3,2,1,0,17,16,1,0,0,0,18,21,1,0,0,0,19,17,1,0,
		0,0,19,20,1,0,0,0,20,1,1,0,0,0,21,19,1,0,0,0,22,26,3,6,3,0,23,26,3,4,2,
		0,24,26,3,8,4,0,25,22,1,0,0,0,25,23,1,0,0,0,25,24,1,0,0,0,26,3,1,0,0,0,
		27,28,5,1,0,0,28,29,5,51,0,0,29,30,5,45,0,0,30,31,5,2,0,0,31,33,3,14,7,
		0,32,34,5,3,0,0,33,32,1,0,0,0,33,34,1,0,0,0,34,48,1,0,0,0,35,36,5,1,0,
		0,36,37,5,51,0,0,37,39,5,45,0,0,38,40,5,3,0,0,39,38,1,0,0,0,39,40,1,0,
		0,0,40,48,1,0,0,0,41,42,5,51,0,0,42,43,5,4,0,0,43,45,3,14,7,0,44,46,5,
		3,0,0,45,44,1,0,0,0,45,46,1,0,0,0,46,48,1,0,0,0,47,27,1,0,0,0,47,35,1,
		0,0,0,47,41,1,0,0,0,48,5,1,0,0,0,49,50,5,51,0,0,50,51,5,4,0,0,51,52,5,
		5,0,0,52,53,5,6,0,0,53,54,5,45,0,0,54,55,5,7,0,0,55,60,3,14,7,0,56,57,
		5,8,0,0,57,59,3,14,7,0,58,56,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,60,61,
		1,0,0,0,61,63,1,0,0,0,62,60,1,0,0,0,63,65,5,9,0,0,64,66,5,3,0,0,65,64,
		1,0,0,0,65,66,1,0,0,0,66,76,1,0,0,0,67,68,5,1,0,0,68,69,5,51,0,0,69,70,
		5,5,0,0,70,71,5,6,0,0,71,73,5,45,0,0,72,74,5,3,0,0,73,72,1,0,0,0,73,74,
		1,0,0,0,74,76,1,0,0,0,75,49,1,0,0,0,75,67,1,0,0,0,76,7,1,0,0,0,77,79,3,
		14,7,0,78,80,5,3,0,0,79,78,1,0,0,0,79,80,1,0,0,0,80,151,1,0,0,0,81,82,
		5,10,0,0,82,87,3,14,7,0,83,84,5,8,0,0,84,86,3,14,7,0,85,83,1,0,0,0,86,
		89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,87,1,0,0,0,90,
		92,5,11,0,0,91,93,5,3,0,0,92,91,1,0,0,0,92,93,1,0,0,0,93,151,1,0,0,0,94,
		98,5,7,0,0,95,97,3,2,1,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,
		99,1,0,0,0,99,101,1,0,0,0,100,98,1,0,0,0,101,151,5,9,0,0,102,108,5,12,
		0,0,103,104,5,13,0,0,104,105,3,14,7,0,105,106,5,11,0,0,106,109,1,0,0,0,
		107,109,3,14,7,0,108,103,1,0,0,0,108,107,1,0,0,0,109,110,1,0,0,0,110,113,
		3,8,4,0,111,112,5,14,0,0,112,114,3,8,4,0,113,111,1,0,0,0,113,114,1,0,0,
		0,114,151,1,0,0,0,115,121,5,15,0,0,116,117,5,13,0,0,117,118,3,14,7,0,118,
		119,5,11,0,0,119,122,1,0,0,0,120,122,3,14,7,0,121,116,1,0,0,0,121,120,
		1,0,0,0,122,123,1,0,0,0,123,127,5,7,0,0,124,126,3,10,5,0,125,124,1,0,0,
		0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,131,1,0,0,0,129,
		127,1,0,0,0,130,132,3,12,6,0,131,130,1,0,0,0,131,132,1,0,0,0,132,133,1,
		0,0,0,133,134,5,9,0,0,134,151,1,0,0,0,135,137,5,16,0,0,136,138,5,3,0,0,
		137,136,1,0,0,0,137,138,1,0,0,0,138,151,1,0,0,0,139,141,5,17,0,0,140,142,
		5,3,0,0,141,140,1,0,0,0,141,142,1,0,0,0,142,151,1,0,0,0,143,145,5,18,0,
		0,144,146,3,14,7,0,145,144,1,0,0,0,145,146,1,0,0,0,146,148,1,0,0,0,147,
		149,5,3,0,0,148,147,1,0,0,0,148,149,1,0,0,0,149,151,1,0,0,0,150,77,1,0,
		0,0,150,81,1,0,0,0,150,94,1,0,0,0,150,102,1,0,0,0,150,115,1,0,0,0,150,
		135,1,0,0,0,150,139,1,0,0,0,150,143,1,0,0,0,151,9,1,0,0,0,152,153,5,19,
		0,0,153,154,3,14,7,0,154,158,5,20,0,0,155,157,3,2,1,0,156,155,1,0,0,0,
		157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,11,1,0,0,0,160,158,
		1,0,0,0,161,162,5,21,0,0,162,166,5,20,0,0,163,165,3,2,1,0,164,163,1,0,
		0,0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,13,1,0,0,0,168,
		166,1,0,0,0,169,170,6,7,-1,0,170,171,5,22,0,0,171,172,5,51,0,0,172,173,
		5,8,0,0,173,174,3,14,7,0,174,176,5,11,0,0,175,177,5,3,0,0,176,175,1,0,
		0,0,176,177,1,0,0,0,177,254,1,0,0,0,178,179,5,23,0,0,179,180,3,14,7,0,
		180,182,5,11,0,0,181,183,5,3,0,0,182,181,1,0,0,0,182,183,1,0,0,0,183,254,
		1,0,0,0,184,185,5,24,0,0,185,186,3,14,7,0,186,188,5,11,0,0,187,189,5,3,
		0,0,188,187,1,0,0,0,188,189,1,0,0,0,189,254,1,0,0,0,190,191,5,25,0,0,191,
		192,3,14,7,0,192,194,5,11,0,0,193,195,5,3,0,0,194,193,1,0,0,0,194,195,
		1,0,0,0,195,254,1,0,0,0,196,197,5,26,0,0,197,198,5,51,0,0,198,199,5,8,
		0,0,199,200,3,14,7,0,200,202,5,11,0,0,201,203,5,3,0,0,202,201,1,0,0,0,
		202,203,1,0,0,0,203,254,1,0,0,0,204,205,5,27,0,0,205,206,5,51,0,0,206,
		207,5,8,0,0,207,208,3,14,7,0,208,210,5,11,0,0,209,211,5,3,0,0,210,209,
		1,0,0,0,210,211,1,0,0,0,211,254,1,0,0,0,212,213,5,28,0,0,213,214,5,51,
		0,0,214,216,5,11,0,0,215,217,5,3,0,0,216,215,1,0,0,0,216,217,1,0,0,0,217,
		254,1,0,0,0,218,219,5,29,0,0,219,254,3,14,7,20,220,221,5,30,0,0,221,254,
		3,14,7,19,222,223,5,51,0,0,223,224,5,5,0,0,224,225,3,14,7,0,225,226,5,
		6,0,0,226,254,1,0,0,0,227,228,5,51,0,0,228,229,5,5,0,0,229,230,3,14,7,
		0,230,231,5,6,0,0,231,232,5,2,0,0,232,233,3,14,7,11,233,254,1,0,0,0,234,
		235,5,51,0,0,235,236,5,2,0,0,236,254,3,14,7,10,237,238,5,51,0,0,238,239,
		5,43,0,0,239,254,3,14,7,9,240,241,5,51,0,0,241,242,5,44,0,0,242,254,3,
		14,7,8,243,254,5,49,0,0,244,254,5,47,0,0,245,254,5,50,0,0,246,254,5,48,
		0,0,247,254,5,46,0,0,248,254,5,51,0,0,249,250,5,13,0,0,250,251,3,14,7,
		0,251,252,5,11,0,0,252,254,1,0,0,0,253,169,1,0,0,0,253,178,1,0,0,0,253,
		184,1,0,0,0,253,190,1,0,0,0,253,196,1,0,0,0,253,204,1,0,0,0,253,212,1,
		0,0,0,253,218,1,0,0,0,253,220,1,0,0,0,253,222,1,0,0,0,253,227,1,0,0,0,
		253,234,1,0,0,0,253,237,1,0,0,0,253,240,1,0,0,0,253,243,1,0,0,0,253,244,
		1,0,0,0,253,245,1,0,0,0,253,246,1,0,0,0,253,247,1,0,0,0,253,248,1,0,0,
		0,253,249,1,0,0,0,254,275,1,0,0,0,255,256,10,18,0,0,256,257,7,0,0,0,257,
		274,3,14,7,19,258,259,10,17,0,0,259,260,7,1,0,0,260,274,3,14,7,18,261,
		262,10,16,0,0,262,263,7,2,0,0,263,274,3,14,7,17,264,265,10,15,0,0,265,
		266,7,3,0,0,266,274,3,14,7,16,267,268,10,14,0,0,268,269,5,41,0,0,269,274,
		3,14,7,15,270,271,10,13,0,0,271,272,5,42,0,0,272,274,3,14,7,14,273,255,
		1,0,0,0,273,258,1,0,0,0,273,261,1,0,0,0,273,264,1,0,0,0,273,267,1,0,0,
		0,273,270,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,
		15,1,0,0,0,277,275,1,0,0,0,36,19,25,33,39,45,47,60,65,73,75,79,87,92,98,
		108,113,121,127,131,137,141,145,148,150,158,166,176,182,188,194,202,210,
		216,253,273,275
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Analizador
