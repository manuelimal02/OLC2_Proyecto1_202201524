//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Gramatica/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Analizador {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, TIPO=13, ENTERO=14, DECIMAL=15, CADENA=16, 
		BOOLEANO=17, CARACTER=18, IDENTIFICADOR=19, WS=20, COMENTARIO=21, COMENTARIOL=22, 
		COMENTARIOLN=23;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "TIPO", "ENTERO", "DECIMAL", "CADENA", "BOOLEANO", 
		"CARACTER", "IDENTIFICADOR", "WS", "COMENTARIO", "COMENTARIOL", "COMENTARIOLN"
	};


	public LanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'='", "';'", "':='", "'fmt.Println('", "','", "')'", "'-'", 
		"'*'", "'/'", "'+'", "'('"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "TIPO", "ENTERO", "DECIMAL", "CADENA", "BOOLEANO", "CARACTER", "IDENTIFICADOR", 
		"WS", "COMENTARIO", "COMENTARIOL", "COMENTARIOLN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,23,199,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
		8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,3,12,110,8,12,1,13,4,13,113,8,13,11,13,12,13,114,1,14,4,14,118,
		8,14,11,14,12,14,119,1,14,1,14,4,14,124,8,14,11,14,12,14,125,1,15,1,15,
		5,15,130,8,15,10,15,12,15,133,9,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,3,16,146,8,16,1,17,1,17,5,17,150,8,17,10,17,12,17,
		153,9,17,1,17,1,17,1,18,1,18,5,18,159,8,18,10,18,12,18,162,9,18,1,19,4,
		19,165,8,19,11,19,12,19,166,1,19,1,19,1,20,1,20,3,20,173,8,20,1,21,1,21,
		1,21,1,21,5,21,179,8,21,10,21,12,21,182,9,21,1,21,1,21,1,22,1,22,1,22,
		1,22,5,22,190,8,22,10,22,12,22,193,9,22,1,22,1,22,1,22,1,22,1,22,1,191,
		0,23,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,1,0,6,1,0,48,
		57,1,0,34,34,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,
		10,13,13,32,32,2,0,10,10,13,13,213,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
		0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
		0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,3,51,1,0,0,
		0,5,53,1,0,0,0,7,55,1,0,0,0,9,58,1,0,0,0,11,71,1,0,0,0,13,73,1,0,0,0,15,
		75,1,0,0,0,17,77,1,0,0,0,19,79,1,0,0,0,21,81,1,0,0,0,23,83,1,0,0,0,25,
		109,1,0,0,0,27,112,1,0,0,0,29,117,1,0,0,0,31,127,1,0,0,0,33,145,1,0,0,
		0,35,147,1,0,0,0,37,156,1,0,0,0,39,164,1,0,0,0,41,172,1,0,0,0,43,174,1,
		0,0,0,45,185,1,0,0,0,47,48,5,118,0,0,48,49,5,97,0,0,49,50,5,114,0,0,50,
		2,1,0,0,0,51,52,5,61,0,0,52,4,1,0,0,0,53,54,5,59,0,0,54,6,1,0,0,0,55,56,
		5,58,0,0,56,57,5,61,0,0,57,8,1,0,0,0,58,59,5,102,0,0,59,60,5,109,0,0,60,
		61,5,116,0,0,61,62,5,46,0,0,62,63,5,80,0,0,63,64,5,114,0,0,64,65,5,105,
		0,0,65,66,5,110,0,0,66,67,5,116,0,0,67,68,5,108,0,0,68,69,5,110,0,0,69,
		70,5,40,0,0,70,10,1,0,0,0,71,72,5,44,0,0,72,12,1,0,0,0,73,74,5,41,0,0,
		74,14,1,0,0,0,75,76,5,45,0,0,76,16,1,0,0,0,77,78,5,42,0,0,78,18,1,0,0,
		0,79,80,5,47,0,0,80,20,1,0,0,0,81,82,5,43,0,0,82,22,1,0,0,0,83,84,5,40,
		0,0,84,24,1,0,0,0,85,86,5,105,0,0,86,87,5,110,0,0,87,110,5,116,0,0,88,
		89,5,102,0,0,89,90,5,108,0,0,90,91,5,111,0,0,91,92,5,97,0,0,92,93,5,116,
		0,0,93,94,5,54,0,0,94,110,5,52,0,0,95,96,5,115,0,0,96,97,5,116,0,0,97,
		98,5,114,0,0,98,99,5,105,0,0,99,100,5,110,0,0,100,110,5,103,0,0,101,102,
		5,98,0,0,102,103,5,111,0,0,103,104,5,111,0,0,104,110,5,108,0,0,105,106,
		5,114,0,0,106,107,5,117,0,0,107,108,5,110,0,0,108,110,5,101,0,0,109,85,
		1,0,0,0,109,88,1,0,0,0,109,95,1,0,0,0,109,101,1,0,0,0,109,105,1,0,0,0,
		110,26,1,0,0,0,111,113,7,0,0,0,112,111,1,0,0,0,113,114,1,0,0,0,114,112,
		1,0,0,0,114,115,1,0,0,0,115,28,1,0,0,0,116,118,7,0,0,0,117,116,1,0,0,0,
		118,119,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,121,1,0,0,0,121,123,
		5,46,0,0,122,124,7,0,0,0,123,122,1,0,0,0,124,125,1,0,0,0,125,123,1,0,0,
		0,125,126,1,0,0,0,126,30,1,0,0,0,127,131,5,34,0,0,128,130,8,1,0,0,129,
		128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,134,1,
		0,0,0,133,131,1,0,0,0,134,135,5,34,0,0,135,32,1,0,0,0,136,137,5,116,0,
		0,137,138,5,114,0,0,138,139,5,117,0,0,139,146,5,101,0,0,140,141,5,102,
		0,0,141,142,5,97,0,0,142,143,5,108,0,0,143,144,5,115,0,0,144,146,5,101,
		0,0,145,136,1,0,0,0,145,140,1,0,0,0,146,34,1,0,0,0,147,151,5,39,0,0,148,
		150,8,1,0,0,149,148,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,
		0,0,0,152,154,1,0,0,0,153,151,1,0,0,0,154,155,5,39,0,0,155,36,1,0,0,0,
		156,160,7,2,0,0,157,159,7,3,0,0,158,157,1,0,0,0,159,162,1,0,0,0,160,158,
		1,0,0,0,160,161,1,0,0,0,161,38,1,0,0,0,162,160,1,0,0,0,163,165,7,4,0,0,
		164,163,1,0,0,0,165,166,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,168,
		1,0,0,0,168,169,6,19,0,0,169,40,1,0,0,0,170,173,3,43,21,0,171,173,3,45,
		22,0,172,170,1,0,0,0,172,171,1,0,0,0,173,42,1,0,0,0,174,175,5,47,0,0,175,
		176,5,47,0,0,176,180,1,0,0,0,177,179,8,5,0,0,178,177,1,0,0,0,179,182,1,
		0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,183,1,0,0,0,182,180,1,0,0,0,
		183,184,6,21,0,0,184,44,1,0,0,0,185,186,5,47,0,0,186,187,5,42,0,0,187,
		191,1,0,0,0,188,190,9,0,0,0,189,188,1,0,0,0,190,193,1,0,0,0,191,192,1,
		0,0,0,191,189,1,0,0,0,192,194,1,0,0,0,193,191,1,0,0,0,194,195,5,42,0,0,
		195,196,5,47,0,0,196,197,1,0,0,0,197,198,6,22,0,0,198,46,1,0,0,0,13,0,
		109,114,119,125,131,145,151,160,166,172,180,191,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Analizador
