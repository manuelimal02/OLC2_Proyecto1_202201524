//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Gramatica/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Analizador {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, TIPO=11, ENTERO=12, DECIMAL=13, CADENA=14, BOOLEANO=15, CARACTER=16, 
		IDENTIFICADOR=17, WS=18, COMENTARIO=19, COMENTARIOL=20, COMENTARIOLN=21;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "TIPO", "ENTERO", "DECIMAL", "CADENA", "BOOLEANO", "CARACTER", 
		"IDENTIFICADOR", "WS", "COMENTARIO", "COMENTARIOL", "COMENTARIOLN"
	};


	public LanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'='", "';'", "':='", "'-'", "'*'", "'/'", "'+'", "'('", 
		"')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "TIPO", 
		"ENTERO", "DECIMAL", "CADENA", "BOOLEANO", "CARACTER", "IDENTIFICADOR", 
		"WS", "COMENTARIO", "COMENTARIOL", "COMENTARIOLN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,21,180,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,
		0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,
		1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,
		91,8,10,1,11,4,11,94,8,11,11,11,12,11,95,1,12,4,12,99,8,12,11,12,12,12,
		100,1,12,1,12,4,12,105,8,12,11,12,12,12,106,1,13,1,13,5,13,111,8,13,10,
		13,12,13,114,9,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,3,14,127,8,14,1,15,1,15,5,15,131,8,15,10,15,12,15,134,9,15,1,15,1,15,
		1,16,1,16,5,16,140,8,16,10,16,12,16,143,9,16,1,17,4,17,146,8,17,11,17,
		12,17,147,1,17,1,17,1,18,1,18,3,18,154,8,18,1,19,1,19,1,19,1,19,5,19,160,
		8,19,10,19,12,19,163,9,19,1,19,1,19,1,20,1,20,1,20,1,20,5,20,171,8,20,
		10,20,12,20,174,9,20,1,20,1,20,1,20,1,20,1,20,1,172,0,21,1,1,3,2,5,3,7,
		4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
		17,35,18,37,19,39,20,41,21,1,0,6,1,0,48,57,1,0,34,34,3,0,65,90,95,95,97,
		122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,
		194,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,1,43,1,0,0,
		0,3,47,1,0,0,0,5,49,1,0,0,0,7,51,1,0,0,0,9,54,1,0,0,0,11,56,1,0,0,0,13,
		58,1,0,0,0,15,60,1,0,0,0,17,62,1,0,0,0,19,64,1,0,0,0,21,90,1,0,0,0,23,
		93,1,0,0,0,25,98,1,0,0,0,27,108,1,0,0,0,29,126,1,0,0,0,31,128,1,0,0,0,
		33,137,1,0,0,0,35,145,1,0,0,0,37,153,1,0,0,0,39,155,1,0,0,0,41,166,1,0,
		0,0,43,44,5,118,0,0,44,45,5,97,0,0,45,46,5,114,0,0,46,2,1,0,0,0,47,48,
		5,61,0,0,48,4,1,0,0,0,49,50,5,59,0,0,50,6,1,0,0,0,51,52,5,58,0,0,52,53,
		5,61,0,0,53,8,1,0,0,0,54,55,5,45,0,0,55,10,1,0,0,0,56,57,5,42,0,0,57,12,
		1,0,0,0,58,59,5,47,0,0,59,14,1,0,0,0,60,61,5,43,0,0,61,16,1,0,0,0,62,63,
		5,40,0,0,63,18,1,0,0,0,64,65,5,41,0,0,65,20,1,0,0,0,66,67,5,105,0,0,67,
		68,5,110,0,0,68,91,5,116,0,0,69,70,5,102,0,0,70,71,5,108,0,0,71,72,5,111,
		0,0,72,73,5,97,0,0,73,74,5,116,0,0,74,75,5,54,0,0,75,91,5,52,0,0,76,77,
		5,115,0,0,77,78,5,116,0,0,78,79,5,114,0,0,79,80,5,105,0,0,80,81,5,110,
		0,0,81,91,5,103,0,0,82,83,5,98,0,0,83,84,5,111,0,0,84,85,5,111,0,0,85,
		91,5,108,0,0,86,87,5,114,0,0,87,88,5,117,0,0,88,89,5,110,0,0,89,91,5,101,
		0,0,90,66,1,0,0,0,90,69,1,0,0,0,90,76,1,0,0,0,90,82,1,0,0,0,90,86,1,0,
		0,0,91,22,1,0,0,0,92,94,7,0,0,0,93,92,1,0,0,0,94,95,1,0,0,0,95,93,1,0,
		0,0,95,96,1,0,0,0,96,24,1,0,0,0,97,99,7,0,0,0,98,97,1,0,0,0,99,100,1,0,
		0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,102,1,0,0,0,102,104,5,46,0,0,103,
		105,7,0,0,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,107,1,
		0,0,0,107,26,1,0,0,0,108,112,5,34,0,0,109,111,8,1,0,0,110,109,1,0,0,0,
		111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,112,
		1,0,0,0,115,116,5,34,0,0,116,28,1,0,0,0,117,118,5,116,0,0,118,119,5,114,
		0,0,119,120,5,117,0,0,120,127,5,101,0,0,121,122,5,102,0,0,122,123,5,97,
		0,0,123,124,5,108,0,0,124,125,5,115,0,0,125,127,5,101,0,0,126,117,1,0,
		0,0,126,121,1,0,0,0,127,30,1,0,0,0,128,132,5,39,0,0,129,131,8,1,0,0,130,
		129,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,135,1,
		0,0,0,134,132,1,0,0,0,135,136,5,39,0,0,136,32,1,0,0,0,137,141,7,2,0,0,
		138,140,7,3,0,0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,
		1,0,0,0,142,34,1,0,0,0,143,141,1,0,0,0,144,146,7,4,0,0,145,144,1,0,0,0,
		146,147,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,149,1,0,0,0,149,150,
		6,17,0,0,150,36,1,0,0,0,151,154,3,39,19,0,152,154,3,41,20,0,153,151,1,
		0,0,0,153,152,1,0,0,0,154,38,1,0,0,0,155,156,5,47,0,0,156,157,5,47,0,0,
		157,161,1,0,0,0,158,160,8,5,0,0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,
		1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,161,1,0,0,0,164,165,6,19,0,
		0,165,40,1,0,0,0,166,167,5,47,0,0,167,168,5,42,0,0,168,172,1,0,0,0,169,
		171,9,0,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,173,1,0,0,0,172,170,1,
		0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,175,176,5,42,0,0,176,177,5,47,0,
		0,177,178,1,0,0,0,178,179,6,20,0,0,179,42,1,0,0,0,13,0,90,95,100,106,112,
		126,132,141,147,153,161,172,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Analizador
